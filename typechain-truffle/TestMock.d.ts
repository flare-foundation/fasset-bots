/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TestMockContract extends Truffle.Contract<TestMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestMockInstance>;
}

export interface PointSet {
  name: "PointSet";
  args: {
    x: BN;
    y: BN;
    0: BN;
    1: BN;
  };
}

export interface PointSetP {
  name: "PointSetP";
  args: {
    p: { x: BN; y: BN };
    0: { x: BN; y: BN };
  };
}

type AllEvents = PointSet | PointSetP;

export interface TestMockInstance extends Truffle.ContractInstance {
  point(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;

  testFunc(
    p: { x: number | BN | string; y: number | BN | string },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ resultName: string; resultVal: BN; point: { x: BN; y: BN } }>;

  testGet(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;

  testResult(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ resultName: string; resultVal: BN; point: { x: BN; y: BN } }>;

  testSet: {
    (
      p: { x: number | BN | string; y: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      p: { x: number | BN | string; y: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ resultName: string; resultVal: BN; point: { x: BN; y: BN } }>;
    sendTransaction(
      p: { x: number | BN | string; y: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      p: { x: number | BN | string; y: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    point(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;

    testFunc(
      p: { x: number | BN | string; y: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ resultName: string; resultVal: BN; point: { x: BN; y: BN } }>;

    testGet(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;

    testResult(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ resultName: string; resultVal: BN; point: { x: BN; y: BN } }>;

    testSet: {
      (
        p: { x: number | BN | string; y: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        p: { x: number | BN | string; y: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        resultName: string;
        resultVal: BN;
        point: { x: BN; y: BN };
      }>;
      sendTransaction(
        p: { x: number | BN | string; y: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        p: { x: number | BN | string; y: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
