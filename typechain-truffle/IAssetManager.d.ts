/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IAssetManagerContract
  extends Truffle.Contract<IAssetManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAssetManagerInstance>;
}

type AllEvents = never;

export interface IAssetManagerInstance extends Truffle.ContractInstance {
  addCollateralType: {
    (
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assetManagerController(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  assetPriceNatWei(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  attachController: {
    (attached: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collateralDeposited: {
    (_token: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_token: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  controllerAttached(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  deprecateCollateralType: {
    (
      _collateralClass: number | BN | string,
      _token: string,
      _invalidationTimeSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralClass: number | BN | string,
      _token: string,
      _invalidationTimeSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralClass: number | BN | string,
      _token: string,
      _invalidationTimeSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralClass: number | BN | string,
      _token: string,
      _invalidationTimeSec: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAgentVaultOwner(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string }>;

  getCollateralPool(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getFAssetsBackedByPool(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getLotSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isAgentVaultOwner(
    _agentVault: string,
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isCollateralToken(
    _agentVault: string,
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  redeemFromAgent: {
    (
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemFromAgentInCollateral: {
    (
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralRatiosForToken: {
    (
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _ccbMinCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _ccbMinCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _ccbMinCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _ccbMinCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPoolCollateralType: {
    (
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        ccbMinCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  terminate: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateSettings: {
    (
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawCollateral: {
    (
      _token: string,
      _amountWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _amountWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _amountWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _amountWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addCollateralType: {
      (
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    assetManagerController(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assetPriceNatWei(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    attachController: {
      (attached: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collateralDeposited: {
      (_token: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    controllerAttached(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    deprecateCollateralType: {
      (
        _collateralClass: number | BN | string,
        _token: string,
        _invalidationTimeSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralClass: number | BN | string,
        _token: string,
        _invalidationTimeSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralClass: number | BN | string,
        _token: string,
        _invalidationTimeSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralClass: number | BN | string,
        _token: string,
        _invalidationTimeSec: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAgentVaultOwner(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;

    getCollateralPool(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getFAssetsBackedByPool(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getLotSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isAgentVaultOwner(
      _agentVault: string,
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isCollateralToken(
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    redeemFromAgent: {
      (
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemFromAgentInCollateral: {
      (
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralRatiosForToken: {
      (
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _ccbMinCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _ccbMinCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _ccbMinCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _ccbMinCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPoolCollateralType: {
      (
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          ccbMinCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    terminate: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    updateSettings: {
      (
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawCollateral: {
      (
        _token: string,
        _amountWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _amountWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _amountWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _amountWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
