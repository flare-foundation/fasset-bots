/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IDistributionToDelegatorsContract
  extends Truffle.Contract<IDistributionToDelegatorsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IDistributionToDelegatorsInstance>;
}

export interface AccountClaimed {
  name: "AccountClaimed";
  args: {
    whoClaimed: string;
    sentTo: string;
    month: BN;
    amountWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface AccountOptOut {
  name: "AccountOptOut";
  args: {
    theAccount: string;
    confirmed: boolean;
    0: string;
    1: boolean;
  };
}

export interface EntitlementStarted {
  name: "EntitlementStarted";
  args: {};
}

type AllEvents = AccountClaimed | AccountOptOut | EntitlementStarted;

export interface IDistributionToDelegatorsInstance
  extends Truffle.ContractInstance {
  claim: {
    (
      _recipient: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _recipient: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _recipient: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recipient: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimToPersonalDelegationAccount: {
    (
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getClaimableAmount(
    _month: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getClaimableAmountOf(
    account: string,
    _month: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getClaimedAmount(
    _month: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getClaimedAmountOf(
    _account: string,
    _month: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrentMonth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getMonthToExpireNext(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  optOutOfAirdrop: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  secondsTillNextClaim(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    claim: {
      (
        _recipient: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _recipient: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _recipient: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _recipient: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimToPersonalDelegationAccount: {
      (
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getClaimableAmount(
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getClaimableAmountOf(
      account: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getClaimedAmount(
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getClaimedAmountOf(
      _account: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentMonth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getMonthToExpireNext(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    optOutOfAirdrop: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    secondsTillNextClaim(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
