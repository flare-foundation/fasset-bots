/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AssetManagerContract
  extends Truffle.Contract<AssetManagerInstance> {
  "new"(
    _settings: {
      assetManagerController: string;
      agentVaultFactory: string;
      whitelist: string;
      attestationClient: string;
      wNat: string;
      ftsoRegistry: string;
      natFtsoIndex: number | BN | string;
      assetFtsoIndex: number | BN | string;
      natFtsoSymbol: string;
      assetFtsoSymbol: string;
      burnAddress: string;
      chainId: number | BN | string;
      collateralReservationFeeBIPS: number | BN | string;
      assetUnitUBA: number | BN | string;
      assetMintingGranularityUBA: number | BN | string;
      lotSizeAMG: number | BN | string;
      maxTrustedPriceAgeSeconds: number | BN | string;
      requireEOAAddressProof: boolean;
      minCollateralRatioBIPS: number | BN | string;
      ccbMinCollateralRatioBIPS: number | BN | string;
      safetyMinCollateralRatioBIPS: number | BN | string;
      underlyingBlocksForPayment: number | BN | string;
      underlyingSecondsForPayment: number | BN | string;
      redemptionFeeBIPS: number | BN | string;
      redemptionDefaultFactorBIPS: number | BN | string;
      confirmationByOthersAfterSeconds: number | BN | string;
      confirmationByOthersRewardNATWei: number | BN | string;
      maxRedeemedTickets: number | BN | string;
      paymentChallengeRewardBIPS: number | BN | string;
      paymentChallengeRewardNATWei: number | BN | string;
      withdrawalWaitMinSeconds: number | BN | string;
      liquidationCollateralFactorBIPS: (number | BN | string)[];
      ccbTimeSeconds: number | BN | string;
      liquidationStepSeconds: number | BN | string;
      attestationWindowSeconds: number | BN | string;
      timelockSeconds: number | BN | string;
      minUpdateRepeatTimeSeconds: number | BN | string;
      buybackCollateralFactorBIPS: number | BN | string;
      announcedUnderlyingConfirmationMinSeconds: number | BN | string;
    },
    _fAsset: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AssetManagerInstance>;
}

export interface AgentAvailable {
  name: "AgentAvailable";
  args: {
    agentVault: string;
    feeBIPS: BN;
    agentMinCollateralRatioBIPS: BN;
    freeCollateralLots: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface AgentCreated {
  name: "AgentCreated";
  args: {
    owner: string;
    agentType: BN;
    agentVault: string;
    underlyingAddress: string;
    0: string;
    1: BN;
    2: string;
    3: string;
  };
}

export interface AgentDestroyAnnounced {
  name: "AgentDestroyAnnounced";
  args: {
    agentVault: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface AgentDestroyed {
  name: "AgentDestroyed";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface AgentInCCB {
  name: "AgentInCCB";
  args: {
    agentVault: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface AvailableAgentExited {
  name: "AvailableAgentExited";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface CollateralReservationDeleted {
  name: "CollateralReservationDeleted";
  args: {
    agentVault: string;
    minter: string;
    collateralReservationId: BN;
    reservedAmountUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface CollateralReserved {
  name: "CollateralReserved";
  args: {
    agentVault: string;
    minter: string;
    collateralReservationId: BN;
    valueUBA: BN;
    feeUBA: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    paymentAddress: string;
    paymentReference: string;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
    8: string;
  };
}

export interface CollateralWithdrawalAnnounced {
  name: "CollateralWithdrawalAnnounced";
  args: {
    agentVault: string;
    valueNATWei: BN;
    timestamp: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface ContractChangeScheduled {
  name: "ContractChangeScheduled";
  args: {
    name: string;
    value: string;
    validAt: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface ContractChanged {
  name: "ContractChanged";
  args: {
    name: string;
    value: string;
    0: string;
    1: string;
  };
}

export interface DuplicatePaymentConfirmed {
  name: "DuplicatePaymentConfirmed";
  args: {
    agentVault: string;
    transactionHash1: string;
    transactionHash2: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface DustChanged {
  name: "DustChanged";
  args: {
    agentVault: string;
    dustUBA: BN;
    0: string;
    1: BN;
  };
}

export interface DustConvertedToTicket {
  name: "DustConvertedToTicket";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    valueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface FullLiquidationStarted {
  name: "FullLiquidationStarted";
  args: {
    agentVault: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface IllegalPaymentConfirmed {
  name: "IllegalPaymentConfirmed";
  args: {
    agentVault: string;
    transactionHash: string;
    0: string;
    1: string;
  };
}

export interface LiquidationEnded {
  name: "LiquidationEnded";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface LiquidationPerformed {
  name: "LiquidationPerformed";
  args: {
    agentVault: string;
    liquidator: string;
    valueUBA: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface LiquidationStarted {
  name: "LiquidationStarted";
  args: {
    agentVault: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface MintingExecuted {
  name: "MintingExecuted";
  args: {
    agentVault: string;
    collateralReservationId: BN;
    redemptionTicketId: BN;
    mintedAmountUBA: BN;
    receivedFeeUBA: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface MintingPaymentDefault {
  name: "MintingPaymentDefault";
  args: {
    agentVault: string;
    minter: string;
    collateralReservationId: BN;
    reservedAmountUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface RedemptionDefault {
  name: "RedemptionDefault";
  args: {
    agentVault: string;
    redeemer: string;
    redemptionAmountUBA: BN;
    redeemedCollateralWei: BN;
    requestId: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface RedemptionFinished {
  name: "RedemptionFinished";
  args: {
    agentVault: string;
    freedUnderlyingBalanceUBA: BN;
    requestId: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionPaymentBlocked {
  name: "RedemptionPaymentBlocked";
  args: {
    agentVault: string;
    redeemer: string;
    transactionHash: string;
    redemptionAmountUBA: BN;
    requestId: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface RedemptionPaymentFailed {
  name: "RedemptionPaymentFailed";
  args: {
    agentVault: string;
    redeemer: string;
    transactionHash: string;
    requestId: BN;
    failureReason: string;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface RedemptionPerformed {
  name: "RedemptionPerformed";
  args: {
    agentVault: string;
    redeemer: string;
    transactionHash: string;
    valueUBA: BN;
    requestId: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface RedemptionRequestIncomplete {
  name: "RedemptionRequestIncomplete";
  args: {
    redeemer: string;
    remainingLots: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionRequested {
  name: "RedemptionRequested";
  args: {
    agentVault: string;
    requestId: BN;
    paymentAddress: string;
    valueUBA: BN;
    feeUBA: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    paymentReference: string;
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
  };
}

export interface SelfClose {
  name: "SelfClose";
  args: {
    agentVault: string;
    valueUBA: BN;
    0: string;
    1: BN;
  };
}

export interface SettingArrayChanged {
  name: "SettingArrayChanged";
  args: {
    name: string;
    value: BN[];
    0: string;
    1: BN[];
  };
}

export interface SettingChangeScheduled {
  name: "SettingChangeScheduled";
  args: {
    name: string;
    value: BN;
    validAt: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface SettingChanged {
  name: "SettingChanged";
  args: {
    name: string;
    value: BN;
    0: string;
    1: BN;
  };
}

export interface UnderlyingBalanceToppedUp {
  name: "UnderlyingBalanceToppedUp";
  args: {
    agentVault: string;
    freeBalanceChangeUBA: BN;
    0: string;
    1: BN;
  };
}

export interface UnderlyingFreeBalanceNegative {
  name: "UnderlyingFreeBalanceNegative";
  args: {
    agentVault: string;
    freeBalance: BN;
    0: string;
    1: BN;
  };
}

export interface UnderlyingWithdrawalAnnounced {
  name: "UnderlyingWithdrawalAnnounced";
  args: {
    agentVault: string;
    announcementId: BN;
    paymentReference: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface UnderlyingWithdrawalCancelled {
  name: "UnderlyingWithdrawalCancelled";
  args: {
    agentVault: string;
    announcementId: BN;
    0: string;
    1: BN;
  };
}

export interface UnderlyingWithdrawalConfirmed {
  name: "UnderlyingWithdrawalConfirmed";
  args: {
    agentVault: string;
    spentUBA: BN;
    transactionHash: string;
    announcementId: BN;
    0: string;
    1: BN;
    2: string;
    3: BN;
  };
}

type AllEvents =
  | AgentAvailable
  | AgentCreated
  | AgentDestroyAnnounced
  | AgentDestroyed
  | AgentInCCB
  | AvailableAgentExited
  | CollateralReservationDeleted
  | CollateralReserved
  | CollateralWithdrawalAnnounced
  | ContractChangeScheduled
  | ContractChanged
  | DuplicatePaymentConfirmed
  | DustChanged
  | DustConvertedToTicket
  | FullLiquidationStarted
  | IllegalPaymentConfirmed
  | LiquidationEnded
  | LiquidationPerformed
  | LiquidationStarted
  | MintingExecuted
  | MintingPaymentDefault
  | RedemptionDefault
  | RedemptionFinished
  | RedemptionPaymentBlocked
  | RedemptionPaymentFailed
  | RedemptionPerformed
  | RedemptionRequestIncomplete
  | RedemptionRequested
  | SelfClose
  | SettingArrayChanged
  | SettingChangeScheduled
  | SettingChanged
  | UnderlyingBalanceToppedUp
  | UnderlyingFreeBalanceNegative
  | UnderlyingWithdrawalAnnounced
  | UnderlyingWithdrawalCancelled
  | UnderlyingWithdrawalConfirmed;

export interface AssetManagerInstance extends Truffle.ContractInstance {
  announceCollateralWithdrawal: {
    (
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceDestroyAgent: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceUnderlyingWithdrawal: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assetManagerController(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  attachController: {
    (attached: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buybackAgentCollateral: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelUnderlyingWithdrawal: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collateralReservationFee(
    _lots: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  confirmRedemptionPayment: {
    (
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTopupPayment: {
    (
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmUnderlyingWithdrawal: {
    (
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  controllerAttached(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  convertDustToTicket: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createAgent: {
    (
      _underlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _underlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _underlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _underlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  currentUnderlyingBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  depositCollateral: {
    (
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  destroyAgent: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  doublePaymentChallenge: {
    (
      _payment1: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _payment2: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment1: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _payment2: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment1: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _payment2: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment1: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _payment2: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  endLiquidation: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeMinting: {
    (
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitAvailableAgentList: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

  finishRedemptionWithoutPayment: {
    (
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  freeBalanceNegativeChallenge: {
    (
      _payments: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payments: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payments: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payments: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAgentInfo(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    status: BN;
    ownerAddress: string;
    underlyingAddressString: string;
    publiclyAvailable: boolean;
    feeBIPS: BN;
    agentMinCollateralRatioBIPS: BN;
    totalCollateralNATWei: BN;
    freeCollateralNATWei: BN;
    freeCollateralLots: BN;
    collateralRatioBIPS: BN;
    mintedUBA: BN;
    reservedUBA: BN;
    redeemingUBA: BN;
    dustUBA: BN;
    ccbStartTimestamp: BN;
    liquidationStartTimestamp: BN;
    lockedUnderlyingBalanceUBA: BN;
    freeUnderlyingBalanceUBA: BN;
    announcedUnderlyingWithdrawalId: BN;
  }>;

  getAvailableAgentsDetailedList(
    _start: number | BN | string,
    _end: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: {
      agentVault: string;
      feeBIPS: BN;
      agentMinCollateralRatioBIPS: BN;
      freeCollateralLots: BN;
    }[];
    1: BN;
  }>;

  getAvailableAgentsList(
    _start: number | BN | string,
    _end: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN }>;

  getSettings(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    assetManagerController: string;
    agentVaultFactory: string;
    whitelist: string;
    attestationClient: string;
    wNat: string;
    ftsoRegistry: string;
    natFtsoIndex: BN;
    assetFtsoIndex: BN;
    natFtsoSymbol: string;
    assetFtsoSymbol: string;
    burnAddress: string;
    chainId: BN;
    collateralReservationFeeBIPS: BN;
    assetUnitUBA: BN;
    assetMintingGranularityUBA: BN;
    lotSizeAMG: BN;
    maxTrustedPriceAgeSeconds: BN;
    requireEOAAddressProof: boolean;
    minCollateralRatioBIPS: BN;
    ccbMinCollateralRatioBIPS: BN;
    safetyMinCollateralRatioBIPS: BN;
    underlyingBlocksForPayment: BN;
    underlyingSecondsForPayment: BN;
    redemptionFeeBIPS: BN;
    redemptionDefaultFactorBIPS: BN;
    confirmationByOthersAfterSeconds: BN;
    confirmationByOthersRewardNATWei: BN;
    maxRedeemedTickets: BN;
    paymentChallengeRewardBIPS: BN;
    paymentChallengeRewardNATWei: BN;
    withdrawalWaitMinSeconds: BN;
    liquidationCollateralFactorBIPS: BN[];
    ccbTimeSeconds: BN;
    liquidationStepSeconds: BN;
    attestationWindowSeconds: BN;
    timelockSeconds: BN;
    minUpdateRepeatTimeSeconds: BN;
    buybackCollateralFactorBIPS: BN;
    announcedUnderlyingConfirmationMinSeconds: BN;
  }>;

  getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  illegalPaymentChallenge: {
    (
      _transaction: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _transaction: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transaction: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transaction: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidate: {
    (
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
    sendTransaction(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  makeAgentAvailable: {
    (
      _agentVault: string,
      _feeBIPS: number | BN | string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _feeBIPS: number | BN | string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _feeBIPS: number | BN | string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _feeBIPS: number | BN | string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintingPaymentDefault: {
    (
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  proveUnderlyingAddressEOA: {
    (
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeem: {
    (
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redemptionPaymentDefault: {
    (
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reserveCollateral: {
    (
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  selfClose: {
    (
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  selfMint: {
    (
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentMinCollateralRatioBIPS: {
    (
      _agentVault: string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _agentMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startLiquidation: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  terminate: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unstickMinting: {
    (
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateCurrentBlock: {
    (
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateSettings: {
    (
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _method: string,
      _params: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawCollateral: {
    (
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    announceCollateralWithdrawal: {
      (
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceDestroyAgent: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceUnderlyingWithdrawal: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    assetManagerController(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    attachController: {
      (attached: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buybackAgentCollateral: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelUnderlyingWithdrawal: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collateralReservationFee(
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    confirmRedemptionPayment: {
      (
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmTopupPayment: {
      (
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmUnderlyingWithdrawal: {
      (
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    controllerAttached(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    convertDustToTicket: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createAgent: {
      (
        _underlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _underlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _underlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _underlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    currentUnderlyingBlock(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    depositCollateral: {
      (
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    destroyAgent: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    doublePaymentChallenge: {
      (
        _payment1: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _payment2: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment1: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _payment2: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment1: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _payment2: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment1: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _payment2: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    endLiquidation: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeMinting: {
      (
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitAvailableAgentList: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

    finishRedemptionWithoutPayment: {
      (
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    freeBalanceNegativeChallenge: {
      (
        _payments: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payments: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payments: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payments: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAgentInfo(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      status: BN;
      ownerAddress: string;
      underlyingAddressString: string;
      publiclyAvailable: boolean;
      feeBIPS: BN;
      agentMinCollateralRatioBIPS: BN;
      totalCollateralNATWei: BN;
      freeCollateralNATWei: BN;
      freeCollateralLots: BN;
      collateralRatioBIPS: BN;
      mintedUBA: BN;
      reservedUBA: BN;
      redeemingUBA: BN;
      dustUBA: BN;
      ccbStartTimestamp: BN;
      liquidationStartTimestamp: BN;
      lockedUnderlyingBalanceUBA: BN;
      freeUnderlyingBalanceUBA: BN;
      announcedUnderlyingWithdrawalId: BN;
    }>;

    getAvailableAgentsDetailedList(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: {
        agentVault: string;
        feeBIPS: BN;
        agentMinCollateralRatioBIPS: BN;
        freeCollateralLots: BN;
      }[];
      1: BN;
    }>;

    getAvailableAgentsList(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN }>;

    getSettings(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      assetManagerController: string;
      agentVaultFactory: string;
      whitelist: string;
      attestationClient: string;
      wNat: string;
      ftsoRegistry: string;
      natFtsoIndex: BN;
      assetFtsoIndex: BN;
      natFtsoSymbol: string;
      assetFtsoSymbol: string;
      burnAddress: string;
      chainId: BN;
      collateralReservationFeeBIPS: BN;
      assetUnitUBA: BN;
      assetMintingGranularityUBA: BN;
      lotSizeAMG: BN;
      maxTrustedPriceAgeSeconds: BN;
      requireEOAAddressProof: boolean;
      minCollateralRatioBIPS: BN;
      ccbMinCollateralRatioBIPS: BN;
      safetyMinCollateralRatioBIPS: BN;
      underlyingBlocksForPayment: BN;
      underlyingSecondsForPayment: BN;
      redemptionFeeBIPS: BN;
      redemptionDefaultFactorBIPS: BN;
      confirmationByOthersAfterSeconds: BN;
      confirmationByOthersRewardNATWei: BN;
      maxRedeemedTickets: BN;
      paymentChallengeRewardBIPS: BN;
      paymentChallengeRewardNATWei: BN;
      withdrawalWaitMinSeconds: BN;
      liquidationCollateralFactorBIPS: BN[];
      ccbTimeSeconds: BN;
      liquidationStepSeconds: BN;
      attestationWindowSeconds: BN;
      timelockSeconds: BN;
      minUpdateRepeatTimeSeconds: BN;
      buybackCollateralFactorBIPS: BN;
      announcedUnderlyingConfirmationMinSeconds: BN;
    }>;

    getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    illegalPaymentChallenge: {
      (
        _transaction: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _transaction: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _transaction: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _transaction: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          sourceAddressHash: string;
          spentAmount: number | BN | string;
          paymentReference: string;
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidate: {
      (
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN }>;
      sendTransaction(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    makeAgentAvailable: {
      (
        _agentVault: string,
        _feeBIPS: number | BN | string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _feeBIPS: number | BN | string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _feeBIPS: number | BN | string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _feeBIPS: number | BN | string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintingPaymentDefault: {
      (
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    proveUnderlyingAddressEOA: {
      (
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeem: {
      (
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redemptionPaymentDefault: {
      (
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          deadlineBlockNumber: number | BN | string;
          deadlineTimestamp: number | BN | string;
          destinationAddressHash: string;
          paymentReference: string;
          amount: number | BN | string;
          lowerBoundaryBlockNumber: number | BN | string;
          lowerBoundaryBlockTimestamp: number | BN | string;
          firstOverflowBlockNumber: number | BN | string;
          firstOverflowBlockTimestamp: number | BN | string;
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reserveCollateral: {
      (
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    selfClose: {
      (
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    selfMint: {
      (
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          transactionHash: string;
          inUtxo: number | BN | string;
          utxo: number | BN | string;
          sourceAddressHash: string;
          receivingAddressHash: string;
          spentAmount: number | BN | string;
          receivedAmount: number | BN | string;
          paymentReference: string;
          oneToOne: boolean;
          status: number | BN | string;
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentMinCollateralRatioBIPS: {
      (
        _agentVault: string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _agentMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    startLiquidation: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    terminate: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    unstickMinting: {
      (
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateCurrentBlock: {
      (
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          stateConnectorRound: number | BN | string;
          merkleProof: string[];
          blockNumber: number | BN | string;
          blockTimestamp: number | BN | string;
          numberOfConfirmations: number | BN | string;
          averageBlockProductionTimeMs: number | BN | string;
          lowestQueryWindowBlockNumber: number | BN | string;
          lowestQueryWindowBlockTimestamp: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateSettings: {
      (
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _method: string,
        _params: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawCollateral: {
      (
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
