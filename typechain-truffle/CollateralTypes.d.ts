/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CollateralTypesContract
  extends Truffle.Contract<CollateralTypesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CollateralTypesInstance>;
}

type AllEvents = never;

export interface CollateralTypesInstance extends Truffle.ContractInstance {
  getAllInfos(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      collateralClass: BN;
      token: string;
      decimals: BN;
      validUntil: BN;
      directPricePair: boolean;
      assetFtsoSymbol: string;
      tokenFtsoSymbol: string;
      minCollateralRatioBIPS: BN;
      ccbMinCollateralRatioBIPS: BN;
      safetyMinCollateralRatioBIPS: BN;
    }[]
  >;

  getInfo(
    _collateralClass: number | BN | string,
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralClass: BN;
    token: string;
    decimals: BN;
    validUntil: BN;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: BN;
    ccbMinCollateralRatioBIPS: BN;
    safetyMinCollateralRatioBIPS: BN;
  }>;

  methods: {
    getAllInfos(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        collateralClass: BN;
        token: string;
        decimals: BN;
        validUntil: BN;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: BN;
        ccbMinCollateralRatioBIPS: BN;
        safetyMinCollateralRatioBIPS: BN;
      }[]
    >;

    getInfo(
      _collateralClass: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralClass: BN;
      token: string;
      decimals: BN;
      validUntil: BN;
      directPricePair: boolean;
      assetFtsoSymbol: string;
      tokenFtsoSymbol: string;
      minCollateralRatioBIPS: BN;
      ccbMinCollateralRatioBIPS: BN;
      safetyMinCollateralRatioBIPS: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
