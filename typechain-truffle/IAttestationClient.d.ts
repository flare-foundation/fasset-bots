/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IAttestationClientContract
  extends Truffle.Contract<IAttestationClientInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IAttestationClientInstance>;
}

type AllEvents = never;

export interface IAttestationClientInstance extends Truffle.ContractInstance {
  verifyBalanceDecreasingTransaction(
    _chainId: number | BN | string,
    _data: {
      stateConnectorRound: number | BN | string;
      merkleProof: string[];
      blockNumber: number | BN | string;
      blockTimestamp: number | BN | string;
      transactionHash: string;
      inUtxo: number | BN | string;
      sourceAddressHash: string;
      spentAmount: number | BN | string;
      paymentReference: string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyConfirmedBlockHeightExists(
    _chainId: number | BN | string,
    _data: {
      stateConnectorRound: number | BN | string;
      merkleProof: string[];
      blockNumber: number | BN | string;
      blockTimestamp: number | BN | string;
      numberOfConfirmations: number | BN | string;
      averageBlockProductionTimeMs: number | BN | string;
      lowestQueryWindowBlockNumber: number | BN | string;
      lowestQueryWindowBlockTimestamp: number | BN | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyPayment(
    _chainId: number | BN | string,
    _data: {
      stateConnectorRound: number | BN | string;
      merkleProof: string[];
      blockNumber: number | BN | string;
      blockTimestamp: number | BN | string;
      transactionHash: string;
      inUtxo: number | BN | string;
      utxo: number | BN | string;
      sourceAddressHash: string;
      receivingAddressHash: string;
      spentAmount: number | BN | string;
      receivedAmount: number | BN | string;
      paymentReference: string;
      oneToOne: boolean;
      status: number | BN | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyReferencedPaymentNonexistence(
    _chainId: number | BN | string,
    _data: {
      stateConnectorRound: number | BN | string;
      merkleProof: string[];
      deadlineBlockNumber: number | BN | string;
      deadlineTimestamp: number | BN | string;
      destinationAddressHash: string;
      paymentReference: string;
      amount: number | BN | string;
      lowerBoundaryBlockNumber: number | BN | string;
      lowerBoundaryBlockTimestamp: number | BN | string;
      firstOverflowBlockNumber: number | BN | string;
      firstOverflowBlockTimestamp: number | BN | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  verifyTrustlineIssuance(
    _chainId: number | BN | string,
    _data: {
      stateConnectorRound: number | BN | string;
      merkleProof: string[];
      tokenCurrencyCode: string;
      tokenValueNominator: number | BN | string;
      tokenValueDenominator: number | BN | string;
      tokenIssuer: string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    verifyBalanceDecreasingTransaction(
      _chainId: number | BN | string,
      _data: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        sourceAddressHash: string;
        spentAmount: number | BN | string;
        paymentReference: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyConfirmedBlockHeightExists(
      _chainId: number | BN | string,
      _data: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        numberOfConfirmations: number | BN | string;
        averageBlockProductionTimeMs: number | BN | string;
        lowestQueryWindowBlockNumber: number | BN | string;
        lowestQueryWindowBlockTimestamp: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyPayment(
      _chainId: number | BN | string,
      _data: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        blockNumber: number | BN | string;
        blockTimestamp: number | BN | string;
        transactionHash: string;
        inUtxo: number | BN | string;
        utxo: number | BN | string;
        sourceAddressHash: string;
        receivingAddressHash: string;
        spentAmount: number | BN | string;
        receivedAmount: number | BN | string;
        paymentReference: string;
        oneToOne: boolean;
        status: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyReferencedPaymentNonexistence(
      _chainId: number | BN | string,
      _data: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        deadlineBlockNumber: number | BN | string;
        deadlineTimestamp: number | BN | string;
        destinationAddressHash: string;
        paymentReference: string;
        amount: number | BN | string;
        lowerBoundaryBlockNumber: number | BN | string;
        lowerBoundaryBlockTimestamp: number | BN | string;
        firstOverflowBlockNumber: number | BN | string;
        firstOverflowBlockTimestamp: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    verifyTrustlineIssuance(
      _chainId: number | BN | string,
      _data: {
        stateConnectorRound: number | BN | string;
        merkleProof: string[];
        tokenCurrencyCode: string;
        tokenValueNominator: number | BN | string;
        tokenValueDenominator: number | BN | string;
        tokenIssuer: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
