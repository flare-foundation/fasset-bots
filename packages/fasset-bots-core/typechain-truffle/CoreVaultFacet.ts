/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CoreVaultFacetContract
  extends Truffle.Contract<CoreVaultFacetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CoreVaultFacetInstance>;
}

export interface CoreVaultRedemptionRequested {
  name: "CoreVaultRedemptionRequested";
  args: {
    redeemer: string;
    paymentAddress: string;
    valueUBA: BN;
    feeUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface DustChanged {
  name: "DustChanged";
  args: {
    agentVault: string;
    dustUBA: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionRequested {
  name: "RedemptionRequested";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    paymentAddress: string;
    valueUBA: BN;
    feeUBA: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: string;
    10: string;
    11: BN;
  };
}

export interface RedemptionTicketCreated {
  name: "RedemptionTicketCreated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionTicketDeleted {
  name: "RedemptionTicketDeleted";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionTicketUpdated {
  name: "RedemptionTicketUpdated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface ReturnFromCoreVaultCancelled {
  name: "ReturnFromCoreVaultCancelled";
  args: {
    agentVault: string;
    requestId: BN;
    0: string;
    1: BN;
  };
}

export interface ReturnFromCoreVaultConfirmed {
  name: "ReturnFromCoreVaultConfirmed";
  args: {
    agentVault: string;
    requestId: BN;
    receivedUnderlyingUBA: BN;
    remintedUBA: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface ReturnFromCoreVaultRequested {
  name: "ReturnFromCoreVaultRequested";
  args: {
    agentVault: string;
    requestId: BN;
    paymentReference: string;
    valueUBA: BN;
    0: string;
    1: BN;
    2: string;
    3: BN;
  };
}

export interface TransferToCoreVaultCancelled {
  name: "TransferToCoreVaultCancelled";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    0: string;
    1: BN;
  };
}

export interface TransferToCoreVaultStarted {
  name: "TransferToCoreVaultStarted";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    valueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface TransferToCoreVaultSuccessful {
  name: "TransferToCoreVaultSuccessful";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    valueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface UnderlyingBalanceChanged {
  name: "UnderlyingBalanceChanged";
  args: {
    agentVault: string;
    underlyingBalanceUBA: BN;
    0: string;
    1: BN;
  };
}

export type AllEvents =
  | CoreVaultRedemptionRequested
  | DustChanged
  | RedemptionRequested
  | RedemptionTicketCreated
  | RedemptionTicketDeleted
  | RedemptionTicketUpdated
  | ReturnFromCoreVaultCancelled
  | ReturnFromCoreVaultConfirmed
  | ReturnFromCoreVaultRequested
  | TransferToCoreVaultCancelled
  | TransferToCoreVaultStarted
  | TransferToCoreVaultSuccessful
  | UnderlyingBalanceChanged;

export interface CoreVaultFacetInstance extends Truffle.ContractInstance {
  cancelReturnFromCoreVault: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelTransferToCoreVault: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmReturnFromCoreVault: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  maximumTransferToCoreVault(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  redeemFromCoreVault: {
    (
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestReturnFromCoreVault: {
    (
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToCoreVault: {
    (
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferToCoreVaultFee(
    _amountUBA: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    cancelReturnFromCoreVault: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelTransferToCoreVault: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmReturnFromCoreVault: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    maximumTransferToCoreVault(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    redeemFromCoreVault: {
      (
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestReturnFromCoreVault: {
      (
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferToCoreVault: {
      (
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferToCoreVaultFee(
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
