/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockDiamondContract
  extends Truffle.Contract<MockDiamondInstance> {
  "new"(
    _diamondCut: {
      facetAddress: string;
      action: number | BN | string;
      functionSelectors: string[];
    }[],
    _init: string,
    _initCalldata: string,
    meta?: Truffle.TransactionDetails
  ): Promise<MockDiamondInstance>;
}

export interface DiamondCut {
  name: "DiamondCut";
  args: {
    _diamondCut: {
      facetAddress: string;
      action: BN;
      functionSelectors: string[];
    }[];
    _init: string;
    _calldata: string;
    0: { facetAddress: string; action: BN; functionSelectors: string[] }[];
    1: string;
    2: string;
  };
}

export type AllEvents = DiamondCut;

export interface MockDiamondInstance extends Truffle.ContractInstance {
  testFunc: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    testFunc: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
