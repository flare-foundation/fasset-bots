/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICollateralPoolContract
  extends Truffle.Contract<ICollateralPoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICollateralPoolInstance>;
}

export interface CPClaimedReward {
  name: "CPClaimedReward";
  args: {
    amountNatWei: BN;
    rewardType: BN;
    0: BN;
    1: BN;
  };
}

export interface CPEntered {
  name: "CPEntered";
  args: {
    tokenHolder: string;
    amountNatWei: BN;
    receivedTokensWei: BN;
    timelockExpiresAt: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface CPExited {
  name: "CPExited";
  args: {
    tokenHolder: string;
    burnedTokensWei: BN;
    receivedNatWei: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface CPFeeDebtChanged {
  name: "CPFeeDebtChanged";
  args: {
    tokenHolder: string;
    newFeeDebtUBA: BN;
    0: string;
    1: BN;
  };
}

export interface CPFeeDebtPaid {
  name: "CPFeeDebtPaid";
  args: {
    tokenHolder: string;
    paidFeesUBA: BN;
    0: string;
    1: BN;
  };
}

export interface CPFeesWithdrawn {
  name: "CPFeesWithdrawn";
  args: {
    tokenHolder: string;
    withdrawnFeesUBA: BN;
    0: string;
    1: BN;
  };
}

export interface CPPaidOut {
  name: "CPPaidOut";
  args: {
    recipient: string;
    paidNatWei: BN;
    burnedTokensWei: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface CPSelfCloseExited {
  name: "CPSelfCloseExited";
  args: {
    tokenHolder: string;
    burnedTokensWei: BN;
    receivedNatWei: BN;
    closedFAssetsUBA: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

type AllEvents =
  | CPClaimedReward
  | CPEntered
  | CPExited
  | CPFeeDebtChanged
  | CPFeeDebtPaid
  | CPFeesWithdrawn
  | CPPaidOut
  | CPSelfCloseExited;

export interface ICollateralPoolInstance extends Truffle.ContractInstance {
  agentVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

  claimAirdropDistribution: {
    (
      _distribution: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _distribution: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _distribution: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _distribution: string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimDelegationRewards: {
    (
      _rewardManager: string,
      _lastRewardEpoch: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardManager: string,
      _lastRewardEpoch: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _rewardManager: string,
      _lastRewardEpoch: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardManager: string,
      _lastRewardEpoch: number | BN | string,
      _proofs: {
        merkleProof: string[];
        body: {
          rewardEpochId: number | BN | string;
          beneficiary: string;
          amount: number | BN | string;
          claimType: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  delegate: {
    (
      _to: string,
      _bips: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _to: string,
      _bips: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _to: string,
      _bips: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string,
      _bips: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  enter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  exit: {
    (
      _tokenShare: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenShare: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _tokenShare: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenShare: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitCollateralRatioBIPS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  exitTo: {
    (
      _tokenShare: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenShare: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _tokenShare: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenShare: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fAssetFeeDebtOf(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  fAssetFeesOf(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  fAssetRequiredForSelfCloseExit(
    _tokenAmountWei: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  optOutOfAirdrop: {
    (_distribution: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _distribution: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _distribution: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _distribution: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  payFAssetFeeDebt: {
    (
      _fassets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _fassets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fassets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fassets: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  poolToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  selfCloseExit: {
    (
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  selfCloseExitTo: {
    (
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _recipient: string,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _recipient: string,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _recipient: string,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _tokenShare: number | BN | string,
      _redeemToCollateral: boolean,
      _recipient: string,
      _redeemerUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalCollateral(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalFAssetFeeDebt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalFAssetFees(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  undelegateAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawFees: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawFeesTo: {
    (
      _amount: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    agentVault(txDetails?: Truffle.TransactionDetails): Promise<string>;

    claimAirdropDistribution: {
      (
        _distribution: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _distribution: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _distribution: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _distribution: string,
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimDelegationRewards: {
      (
        _rewardManager: string,
        _lastRewardEpoch: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardManager: string,
        _lastRewardEpoch: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _rewardManager: string,
        _lastRewardEpoch: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardManager: string,
        _lastRewardEpoch: number | BN | string,
        _proofs: {
          merkleProof: string[];
          body: {
            rewardEpochId: number | BN | string;
            beneficiary: string;
            amount: number | BN | string;
            claimType: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    delegate: {
      (
        _to: string,
        _bips: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _to: string,
        _bips: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _to: string,
        _bips: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _to: string,
        _bips: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    enter: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<{ 0: BN; 1: BN }>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    exit: {
      (
        _tokenShare: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenShare: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _tokenShare: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenShare: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitCollateralRatioBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    exitTo: {
      (
        _tokenShare: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenShare: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _tokenShare: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenShare: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fAssetFeeDebtOf(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    fAssetFeesOf(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    fAssetRequiredForSelfCloseExit(
      _tokenAmountWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    optOutOfAirdrop: {
      (_distribution: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _distribution: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _distribution: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _distribution: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    payFAssetFeeDebt: {
      (
        _fassets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _fassets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fassets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fassets: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    poolToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    selfCloseExit: {
      (
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    selfCloseExitTo: {
      (
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _recipient: string,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _recipient: string,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _recipient: string,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenShare: number | BN | string,
        _redeemToCollateral: boolean,
        _recipient: string,
        _redeemerUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    totalCollateral(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalFAssetFeeDebt(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalFAssetFees(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    undelegateAll: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    withdrawFees: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawFeesTo: {
      (
        _amount: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
