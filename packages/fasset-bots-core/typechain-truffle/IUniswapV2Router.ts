/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IUniswapV2RouterContract
  extends Truffle.Contract<IUniswapV2RouterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IUniswapV2RouterInstance>;
}

export type AllEvents = never;

export interface IUniswapV2RouterInstance extends Truffle.ContractInstance {
  addLiquidity: {
    (
      tokenA: string,
      tokenB: string,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      feeBipsA: number | BN | string,
      feeBipsB: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenA: string,
      tokenB: string,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      feeBipsA: number | BN | string,
      feeBipsB: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;
    sendTransaction(
      tokenA: string,
      tokenB: string,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      feeBipsA: number | BN | string,
      feeBipsB: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string,
      tokenB: string,
      amountADesired: number | BN | string,
      amountBDesired: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      feeBipsA: number | BN | string,
      feeBipsB: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getReserves(
    tokenA: string,
    tokenB: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  pairFor(
    tokenA: string,
    tokenB: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  removeLiquidity: {
    (
      tokenA: string,
      tokenB: string,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenA: string,
      tokenB: string,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
    sendTransaction(
      tokenA: string,
      tokenB: string,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenA: string,
      tokenB: string,
      liquidity: number | BN | string,
      amountAMin: number | BN | string,
      amountBMin: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactTokensForTokens: {
    (
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: BN[] }>;
    sendTransaction(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountIn: number | BN | string,
      amountOutMin: number | BN | string,
      path: string[],
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    addLiquidity: {
      (
        tokenA: string,
        tokenB: string,
        amountADesired: number | BN | string,
        amountBDesired: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        feeBipsA: number | BN | string,
        feeBipsB: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenA: string,
        tokenB: string,
        amountADesired: number | BN | string,
        amountBDesired: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        feeBipsA: number | BN | string,
        feeBipsB: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN }>;
      sendTransaction(
        tokenA: string,
        tokenB: string,
        amountADesired: number | BN | string,
        amountBDesired: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        feeBipsA: number | BN | string,
        feeBipsB: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenA: string,
        tokenB: string,
        amountADesired: number | BN | string,
        amountBDesired: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        feeBipsA: number | BN | string,
        feeBipsB: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    factory(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getReserves(
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    pairFor(
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    removeLiquidity: {
      (
        tokenA: string,
        tokenB: string,
        liquidity: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenA: string,
        tokenB: string,
        liquidity: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN }>;
      sendTransaction(
        tokenA: string,
        tokenB: string,
        liquidity: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenA: string,
        tokenB: string,
        liquidity: number | BN | string,
        amountAMin: number | BN | string,
        amountBMin: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapExactTokensForTokens: {
      (
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN[]; 1: BN[] }>;
      sendTransaction(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amountIn: number | BN | string,
        amountOutMin: number | BN | string,
        path: string[],
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
