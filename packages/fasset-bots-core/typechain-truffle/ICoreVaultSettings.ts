/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICoreVaultSettingsContract
  extends Truffle.Contract<ICoreVaultSettingsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICoreVaultSettingsInstance>;
}

export type AllEvents = never;

export interface ICoreVaultSettingsInstance extends Truffle.ContractInstance {
  getCoreVaultManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getCoreVaultMinimumAmountLeftBIPS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultMinimumRedeemLots(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultNativeAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCoreVaultRedemptionFeeBIPS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultTransferFeeBIPS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultTransferTimeExtensionSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setCoreVaultManager: {
    (
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultMinimumAmountLeftBIPS: {
    (
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultMinimumRedeemLots: {
    (
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultNativeAddress: {
    (_nativeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _nativeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nativeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nativeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultRedemptionFeeBIPS: {
    (
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultTransferFeeBIPS: {
    (
      _transferFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _transferFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transferFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transferFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultTransferTimeExtensionSeconds: {
    (
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getCoreVaultManager(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCoreVaultMinimumAmountLeftBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultMinimumRedeemLots(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultNativeAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCoreVaultRedemptionFeeBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultTransferFeeBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultTransferTimeExtensionSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setCoreVaultManager: {
      (
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultMinimumAmountLeftBIPS: {
      (
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultMinimumRedeemLots: {
      (
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultNativeAddress: {
      (_nativeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _nativeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nativeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nativeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultRedemptionFeeBIPS: {
      (
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultTransferFeeBIPS: {
      (
        _transferFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _transferFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _transferFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _transferFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultTransferTimeExtensionSeconds: {
      (
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
