/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFdcInflationConfigurationsContract
  extends Truffle.Contract<IFdcInflationConfigurationsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFdcInflationConfigurationsInstance>;
}

type AllEvents = never;

export interface IFdcInflationConfigurationsInstance
  extends Truffle.ContractInstance {
  getFdcConfiguration(
    _index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    attestationType: string;
    source: string;
    inflationShare: BN;
    minRequestsThreshold: BN;
    mode: BN;
  }>;

  getFdcConfigurations(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      attestationType: string;
      source: string;
      inflationShare: BN;
      minRequestsThreshold: BN;
      mode: BN;
    }[]
  >;

  methods: {
    getFdcConfiguration(
      _index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      attestationType: string;
      source: string;
      inflationShare: BN;
      minRequestsThreshold: BN;
      mode: BN;
    }>;

    getFdcConfigurations(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        attestationType: string;
        source: string;
        inflationShare: BN;
        minRequestsThreshold: BN;
        mode: BN;
      }[]
    >;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
