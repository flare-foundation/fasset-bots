/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CoreVaultManagerProxyContract
  extends Truffle.Contract<CoreVaultManagerProxyInstance> {
  "new"(
    _implementationAddress: string,
    _governanceSettings: string,
    _initialGovernance: string,
    _addressUpdater: string,
    _assetManager: string,
    _chainId: string,
    _custodianAddress: string,
    _coreVaultAddress: string,
    _nextSequenceNumber: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<CoreVaultManagerProxyInstance>;
}

export interface AdminChanged {
  name: "AdminChanged";
  args: {
    previousAdmin: string;
    newAdmin: string;
    0: string;
    1: string;
  };
}

export interface BeaconUpgraded {
  name: "BeaconUpgraded";
  args: {
    beacon: string;
    0: string;
  };
}

export interface Upgraded {
  name: "Upgraded";
  args: {
    implementation: string;
    0: string;
  };
}

type AllEvents = AdminChanged | BeaconUpgraded | Upgraded;

export interface CoreVaultManagerProxyInstance
  extends Truffle.ContractInstance {
  methods: {};

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
