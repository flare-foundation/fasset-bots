/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AgentVaultManagementFacetContract
  extends Truffle.Contract<AgentVaultManagementFacetInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AgentVaultManagementFacetInstance>;
}

export interface AgentDestroyAnnounced {
  name: "AgentDestroyAnnounced";
  args: {
    agentVault: string;
    destroyAllowedAt: BN;
    0: string;
    1: BN;
  };
}

export interface AgentDestroyed {
  name: "AgentDestroyed";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface AgentVaultCreated {
  name: "AgentVaultCreated";
  args: {
    owner: string;
    agentVault: string;
    creationData: {
      collateralPool: string;
      collateralPoolToken: string;
      underlyingAddress: string;
      vaultCollateralToken: string;
      poolWNatToken: string;
      feeBIPS: BN;
      poolFeeShareBIPS: BN;
      mintingVaultCollateralRatioBIPS: BN;
      mintingPoolCollateralRatioBIPS: BN;
      buyFAssetByAgentFactorBIPS: BN;
      poolExitCollateralRatioBIPS: BN;
      redemptionPoolFeeShareBIPS: BN;
    };
    0: string;
    1: string;
    2: {
      collateralPool: string;
      collateralPoolToken: string;
      underlyingAddress: string;
      vaultCollateralToken: string;
      poolWNatToken: string;
      feeBIPS: BN;
      poolFeeShareBIPS: BN;
      mintingVaultCollateralRatioBIPS: BN;
      mintingPoolCollateralRatioBIPS: BN;
      buyFAssetByAgentFactorBIPS: BN;
      poolExitCollateralRatioBIPS: BN;
      redemptionPoolFeeShareBIPS: BN;
    };
  };
}

export type AllEvents = AgentDestroyAnnounced | AgentDestroyed | AgentVaultCreated;

export interface AgentVaultManagementFacetInstance
  extends Truffle.ContractInstance {
  announceDestroyAgent: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createAgentVault: {
    (
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  destroyAgent: {
    (
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeAgentVaultAndPool: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeAgentVaultsAndPools: {
    (
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    announceDestroyAgent: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createAgentVault: {
      (
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    destroyAgent: {
      (
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeAgentVaultAndPool: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeAgentVaultsAndPools: {
      (
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
