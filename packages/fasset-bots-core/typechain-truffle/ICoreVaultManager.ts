/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ICoreVaultManagerContract
  extends Truffle.Contract<ICoreVaultManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICoreVaultManagerInstance>;
}

export interface EscrowFinished {
  name: "EscrowFinished";
  args: {
    preimageHash: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface EscrowInstructions {
  name: "EscrowInstructions";
  args: {
    sequence: BN;
    preimageHash: string;
    account: string;
    destination: string;
    amount: BN;
    cancelAfterTs: BN;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
  };
}

export interface NotAllEscrowsProcessed {
  name: "NotAllEscrowsProcessed";
  args: {};
}

export interface Paused {
  name: "Paused";
  args: {};
}

export interface PaymentConfirmed {
  name: "PaymentConfirmed";
  args: {
    transactionId: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface PaymentInstructions {
  name: "PaymentInstructions";
  args: {
    sequence: BN;
    account: string;
    destination: string;
    amount: BN;
    paymentReference: string;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {};
}

export type AllEvents =
  | EscrowFinished
  | EscrowInstructions
  | NotAllEscrowsProcessed
  | Paused
  | PaymentConfirmed
  | PaymentInstructions
  | Unpaused;

export interface ICoreVaultManagerInstance extends Truffle.ContractInstance {
  availableFunds(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  cancelableTransferRequestsAmount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  confirmPayment: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  coreVaultAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  coreVaultAddressHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

  custodianAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  escrowedFunds(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAllowedDestinationAddresses(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getCancelableTransferRequests(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { destinationAddress: string; paymentReference: string; amount: BN }[]
  >;

  getEmergencyPauseSenders(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getEscrowByIndex(
    _index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    preimageHash: string;
    amount: BN;
    expiryTs: BN;
    finished: boolean;
  }>;

  getEscrowByPreimageHash(
    _preimageHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    preimageHash: string;
    amount: BN;
    expiryTs: BN;
    finished: boolean;
  }>;

  getEscrowsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getNonCancelableTransferRequests(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { destinationAddress: string; paymentReference: string; amount: BN }[]
  >;

  getPreimageHash(
    _index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPreimageHashesCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getTriggeringAccounts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getUnprocessedEscrows(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { preimageHash: string; amount: BN; expiryTs: BN; finished: boolean }[]
  >;

  getUnusedPreimageHashes(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isDestinationAddressAllowed(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  nextUnprocessedEscrowIndex(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nextUnusedPreimageHashIndex(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nonCancelableTransferRequestsAmount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  processEscrows: {
    (
      _maxCount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _maxCount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _maxCount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _maxCount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  triggerInstructions: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    availableFunds(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    cancelableTransferRequestsAmount(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    confirmPayment: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    coreVaultAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    coreVaultAddressHash(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    custodianAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    escrowedFunds(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAllowedDestinationAddresses(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getCancelableTransferRequests(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { destinationAddress: string; paymentReference: string; amount: BN }[]
    >;

    getEmergencyPauseSenders(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getEscrowByIndex(
      _index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      preimageHash: string;
      amount: BN;
      expiryTs: BN;
      finished: boolean;
    }>;

    getEscrowByPreimageHash(
      _preimageHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      preimageHash: string;
      amount: BN;
      expiryTs: BN;
      finished: boolean;
    }>;

    getEscrowsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getNonCancelableTransferRequests(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { destinationAddress: string; paymentReference: string; amount: BN }[]
    >;

    getPreimageHash(
      _index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getPreimageHashesCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getTriggeringAccounts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getUnprocessedEscrows(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { preimageHash: string; amount: BN; expiryTs: BN; finished: boolean }[]
    >;

    getUnusedPreimageHashes(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    isDestinationAddressAllowed(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    nextUnprocessedEscrowIndex(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    nextUnusedPreimageHashIndex(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    nonCancelableTransferRequestsAmount(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    processEscrows: {
      (
        _maxCount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _maxCount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _maxCount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _maxCount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    triggerInstructions: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
