/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IAgentOwnerRegistryContract
  extends Truffle.Contract<IAgentOwnerRegistryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IAgentOwnerRegistryInstance>;
}

export interface Whitelisted {
  name: "Whitelisted";
  args: {
    value: string;
    0: string;
  };
}

export interface WhitelistingRevoked {
  name: "WhitelistingRevoked";
  args: {
    value: string;
    0: string;
  };
}

export interface WorkAddressChanged {
  name: "WorkAddressChanged";
  args: {
    managementAddress: string;
    prevWorkAddress: string;
    workAddress: string;
    0: string;
    1: string;
    2: string;
  };
}

export type AllEvents = Whitelisted | WhitelistingRevoked | WorkAddressChanged;

export interface IAgentOwnerRegistryInstance extends Truffle.ContractInstance {
  getManagementAddress(
    _workAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getWorkAddress(
    _managementAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isWhitelisted(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    getManagementAddress(
      _workAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getWorkAddress(
      _managementAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isWhitelisted(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
