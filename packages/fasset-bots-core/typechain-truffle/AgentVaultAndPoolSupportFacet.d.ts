/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AgentVaultAndPoolSupportFacetContract
  extends Truffle.Contract<AgentVaultAndPoolSupportFacetInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<AgentVaultAndPoolSupportFacetInstance>;
}

type AllEvents = never;

export interface AgentVaultAndPoolSupportFacetInstance
  extends Truffle.ContractInstance {
  assetPriceNatWei(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  getFAssetsBackedByPool(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getWorkAddress(
    _managementAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isAgentVaultOwner(
    _agentVault: string,
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isLockedVaultToken(
    _agentVault: string,
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    assetPriceNatWei(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    getFAssetsBackedByPool(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getWorkAddress(
      _managementAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isAgentVaultOwner(
      _agentVault: string,
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isLockedVaultToken(
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
