/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DistributionToDelegatorsMockContract
  extends Truffle.Contract<DistributionToDelegatorsMockInstance> {
  "new"(
    _wNat: string,
    meta?: Truffle.TransactionDetails
  ): Promise<DistributionToDelegatorsMockInstance>;
}

export interface OptedOutOfAirdrop {
  name: "OptedOutOfAirdrop";
  args: {
    account: string;
    0: string;
  };
}

export type AllEvents = OptedOutOfAirdrop;

export interface DistributionToDelegatorsMockInstance
  extends Truffle.ContractInstance {
  claim: {
    (
      arg0: string,
      _recipient: string,
      arg2: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      _recipient: string,
      arg2: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      arg0: string,
      _recipient: string,
      arg2: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      _recipient: string,
      arg2: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  optOutOfAirdrop: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    claim: {
      (
        arg0: string,
        _recipient: string,
        arg2: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        _recipient: string,
        arg2: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        arg0: string,
        _recipient: string,
        arg2: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        _recipient: string,
        arg2: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    optOutOfAirdrop: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
