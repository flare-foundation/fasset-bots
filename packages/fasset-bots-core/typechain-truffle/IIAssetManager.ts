/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IIAssetManagerContract
  extends Truffle.Contract<IIAssetManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IIAssetManagerInstance>;
}

export interface AgentAvailable {
  name: "AgentAvailable";
  args: {
    agentVault: string;
    feeBIPS: BN;
    mintingVaultCollateralRatioBIPS: BN;
    mintingPoolCollateralRatioBIPS: BN;
    freeCollateralLots: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface AgentCollateralTypeChanged {
  name: "AgentCollateralTypeChanged";
  args: {
    agentVault: string;
    collateralClass: BN;
    token: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface AgentDestroyAnnounced {
  name: "AgentDestroyAnnounced";
  args: {
    agentVault: string;
    destroyAllowedAt: BN;
    0: string;
    1: BN;
  };
}

export interface AgentDestroyed {
  name: "AgentDestroyed";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface AgentPing {
  name: "AgentPing";
  args: {
    agentVault: string;
    sender: string;
    query: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface AgentPingResponse {
  name: "AgentPingResponse";
  args: {
    agentVault: string;
    owner: string;
    query: BN;
    response: string;
    0: string;
    1: string;
    2: BN;
    3: string;
  };
}

export interface AgentSettingChangeAnnounced {
  name: "AgentSettingChangeAnnounced";
  args: {
    agentVault: string;
    name: string;
    value: BN;
    validAt: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface AgentSettingChanged {
  name: "AgentSettingChanged";
  args: {
    agentVault: string;
    name: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface AgentVaultCreated {
  name: "AgentVaultCreated";
  args: {
    owner: string;
    agentVault: string;
    creationData: {
      collateralPool: string;
      collateralPoolToken: string;
      underlyingAddress: string;
      vaultCollateralToken: string;
      poolWNatToken: string;
      feeBIPS: BN;
      poolFeeShareBIPS: BN;
      mintingVaultCollateralRatioBIPS: BN;
      mintingPoolCollateralRatioBIPS: BN;
      buyFAssetByAgentFactorBIPS: BN;
      poolExitCollateralRatioBIPS: BN;
      redemptionPoolFeeShareBIPS: BN;
    };
    0: string;
    1: string;
    2: {
      collateralPool: string;
      collateralPoolToken: string;
      underlyingAddress: string;
      vaultCollateralToken: string;
      poolWNatToken: string;
      feeBIPS: BN;
      poolFeeShareBIPS: BN;
      mintingVaultCollateralRatioBIPS: BN;
      mintingPoolCollateralRatioBIPS: BN;
      buyFAssetByAgentFactorBIPS: BN;
      poolExitCollateralRatioBIPS: BN;
      redemptionPoolFeeShareBIPS: BN;
    };
  };
}

export interface AvailableAgentExitAnnounced {
  name: "AvailableAgentExitAnnounced";
  args: {
    agentVault: string;
    exitAllowedAt: BN;
    0: string;
    1: BN;
  };
}

export interface AvailableAgentExited {
  name: "AvailableAgentExited";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface CollateralRatiosChanged {
  name: "CollateralRatiosChanged";
  args: {
    collateralClass: BN;
    collateralToken: string;
    minCollateralRatioBIPS: BN;
    safetyMinCollateralRatioBIPS: BN;
    0: BN;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface CollateralReservationDeleted {
  name: "CollateralReservationDeleted";
  args: {
    agentVault: string;
    minter: string;
    collateralReservationId: BN;
    reservedAmountUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface CollateralReserved {
  name: "CollateralReserved";
  args: {
    agentVault: string;
    minter: string;
    collateralReservationId: BN;
    valueUBA: BN;
    feeUBA: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    paymentAddress: string;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: string;
    9: string;
    10: string;
    11: BN;
  };
}

export interface CollateralTypeAdded {
  name: "CollateralTypeAdded";
  args: {
    collateralClass: BN;
    token: string;
    decimals: BN;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: BN;
    safetyMinCollateralRatioBIPS: BN;
    0: BN;
    1: string;
    2: BN;
    3: boolean;
    4: string;
    5: string;
    6: BN;
    7: BN;
  };
}

export interface ContractChanged {
  name: "ContractChanged";
  args: {
    name: string;
    value: string;
    0: string;
    1: string;
  };
}

export interface CoreVaultRedemptionRequested {
  name: "CoreVaultRedemptionRequested";
  args: {
    redeemer: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: BN;
    feeUBA: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface CurrentUnderlyingBlockUpdated {
  name: "CurrentUnderlyingBlockUpdated";
  args: {
    underlyingBlockNumber: BN;
    underlyingBlockTimestamp: BN;
    updatedAt: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface DiamondCut {
  name: "DiamondCut";
  args: {
    _diamondCut: {
      facetAddress: string;
      action: BN;
      functionSelectors: string[];
    }[];
    _init: string;
    _calldata: string;
    0: { facetAddress: string; action: BN; functionSelectors: string[] }[];
    1: string;
    2: string;
  };
}

export interface DuplicatePaymentConfirmed {
  name: "DuplicatePaymentConfirmed";
  args: {
    agentVault: string;
    transactionHash1: string;
    transactionHash2: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface DustChanged {
  name: "DustChanged";
  args: {
    agentVault: string;
    dustUBA: BN;
    0: string;
    1: BN;
  };
}

export interface EmergencyPauseCanceled {
  name: "EmergencyPauseCanceled";
  args: {};
}

export interface EmergencyPauseTriggered {
  name: "EmergencyPauseTriggered";
  args: {
    externalLevel: BN;
    externalPausedUntil: BN;
    governanceLevel: BN;
    governancePausedUntil: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface FullLiquidationStarted {
  name: "FullLiquidationStarted";
  args: {
    agentVault: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface GovernanceCallTimelocked {
  name: "GovernanceCallTimelocked";
  args: {
    encodedCall: string;
    encodedCallHash: string;
    allowedAfterTimestamp: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface GovernanceInitialised {
  name: "GovernanceInitialised";
  args: {
    initialGovernance: string;
    0: string;
  };
}

export interface GovernedProductionModeEntered {
  name: "GovernedProductionModeEntered";
  args: {
    governanceSettings: string;
    0: string;
  };
}

export interface IllegalPaymentConfirmed {
  name: "IllegalPaymentConfirmed";
  args: {
    agentVault: string;
    transactionHash: string;
    0: string;
    1: string;
  };
}

export interface LiquidationEnded {
  name: "LiquidationEnded";
  args: {
    agentVault: string;
    0: string;
  };
}

export interface LiquidationPerformed {
  name: "LiquidationPerformed";
  args: {
    agentVault: string;
    liquidator: string;
    valueUBA: BN;
    paidVaultCollateralWei: BN;
    paidPoolCollateralWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface LiquidationStarted {
  name: "LiquidationStarted";
  args: {
    agentVault: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface MintingExecuted {
  name: "MintingExecuted";
  args: {
    agentVault: string;
    collateralReservationId: BN;
    mintedAmountUBA: BN;
    agentFeeUBA: BN;
    poolFeeUBA: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface MintingPaymentDefault {
  name: "MintingPaymentDefault";
  args: {
    agentVault: string;
    minter: string;
    collateralReservationId: BN;
    reservedAmountUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface PoolTokenRedemptionAnnounced {
  name: "PoolTokenRedemptionAnnounced";
  args: {
    agentVault: string;
    amountWei: BN;
    withdrawalAllowedAt: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedeemedInCollateral {
  name: "RedeemedInCollateral";
  args: {
    agentVault: string;
    redeemer: string;
    redemptionAmountUBA: BN;
    paidVaultCollateralWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface RedemptionDefault {
  name: "RedemptionDefault";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    redemptionAmountUBA: BN;
    redeemedVaultCollateralWei: BN;
    redeemedPoolCollateralWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface RedemptionPaymentBlocked {
  name: "RedemptionPaymentBlocked";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    transactionHash: string;
    redemptionAmountUBA: BN;
    spentUnderlyingUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: BN;
  };
}

export interface RedemptionPaymentFailed {
  name: "RedemptionPaymentFailed";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    transactionHash: string;
    spentUnderlyingUBA: BN;
    failureReason: string;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: string;
  };
}

export interface RedemptionPerformed {
  name: "RedemptionPerformed";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    transactionHash: string;
    redemptionAmountUBA: BN;
    spentUnderlyingUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: BN;
  };
}

export interface RedemptionPoolFeeMinted {
  name: "RedemptionPoolFeeMinted";
  args: {
    agentVault: string;
    requestId: BN;
    poolFeeUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionRejected {
  name: "RedemptionRejected";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    redemptionAmountUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface RedemptionRequestIncomplete {
  name: "RedemptionRequestIncomplete";
  args: {
    redeemer: string;
    remainingLots: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionRequested {
  name: "RedemptionRequested";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    paymentAddress: string;
    valueUBA: BN;
    feeUBA: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: string;
    10: string;
    11: BN;
  };
}

export interface RedemptionTicketCreated {
  name: "RedemptionTicketCreated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionTicketDeleted {
  name: "RedemptionTicketDeleted";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionTicketUpdated {
  name: "RedemptionTicketUpdated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionTicketsConsolidated {
  name: "RedemptionTicketsConsolidated";
  args: {
    firstTicketId: BN;
    nextTicketId: BN;
    0: BN;
    1: BN;
  };
}

export interface ReturnFromCoreVaultCancelled {
  name: "ReturnFromCoreVaultCancelled";
  args: {
    agentVault: string;
    requestId: BN;
    0: string;
    1: BN;
  };
}

export interface ReturnFromCoreVaultConfirmed {
  name: "ReturnFromCoreVaultConfirmed";
  args: {
    agentVault: string;
    requestId: BN;
    receivedUnderlyingUBA: BN;
    remintedUBA: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface ReturnFromCoreVaultRequested {
  name: "ReturnFromCoreVaultRequested";
  args: {
    agentVault: string;
    requestId: BN;
    paymentReference: string;
    valueUBA: BN;
    0: string;
    1: BN;
    2: string;
    3: BN;
  };
}

export interface SelfClose {
  name: "SelfClose";
  args: {
    agentVault: string;
    valueUBA: BN;
    0: string;
    1: BN;
  };
}

export interface SelfMint {
  name: "SelfMint";
  args: {
    agentVault: string;
    mintFromFreeUnderlying: boolean;
    mintedAmountUBA: BN;
    depositedAmountUBA: BN;
    poolFeeUBA: BN;
    0: string;
    1: boolean;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface SettingArrayChanged {
  name: "SettingArrayChanged";
  args: {
    name: string;
    value: BN[];
    0: string;
    1: BN[];
  };
}

export interface SettingChanged {
  name: "SettingChanged";
  args: {
    name: string;
    value: BN;
    0: string;
    1: BN;
  };
}

export interface TimelockedGovernanceCallCanceled {
  name: "TimelockedGovernanceCallCanceled";
  args: {
    encodedCallHash: string;
    0: string;
  };
}

export interface TimelockedGovernanceCallExecuted {
  name: "TimelockedGovernanceCallExecuted";
  args: {
    encodedCallHash: string;
    0: string;
  };
}

export interface TransferToCoreVaultDefaulted {
  name: "TransferToCoreVaultDefaulted";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    remintedUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface TransferToCoreVaultStarted {
  name: "TransferToCoreVaultStarted";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    valueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface TransferToCoreVaultSuccessful {
  name: "TransferToCoreVaultSuccessful";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    valueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface UnderlyingBalanceChanged {
  name: "UnderlyingBalanceChanged";
  args: {
    agentVault: string;
    underlyingBalanceUBA: BN;
    0: string;
    1: BN;
  };
}

export interface UnderlyingBalanceTooLow {
  name: "UnderlyingBalanceTooLow";
  args: {
    agentVault: string;
    balance: BN;
    requiredBalance: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface UnderlyingBalanceToppedUp {
  name: "UnderlyingBalanceToppedUp";
  args: {
    agentVault: string;
    transactionHash: string;
    depositedUBA: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface UnderlyingWithdrawalAnnounced {
  name: "UnderlyingWithdrawalAnnounced";
  args: {
    agentVault: string;
    announcementId: BN;
    paymentReference: string;
    0: string;
    1: BN;
    2: string;
  };
}

export interface UnderlyingWithdrawalCancelled {
  name: "UnderlyingWithdrawalCancelled";
  args: {
    agentVault: string;
    announcementId: BN;
    0: string;
    1: BN;
  };
}

export interface UnderlyingWithdrawalConfirmed {
  name: "UnderlyingWithdrawalConfirmed";
  args: {
    agentVault: string;
    announcementId: BN;
    spentUBA: BN;
    transactionHash: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface VaultCollateralWithdrawalAnnounced {
  name: "VaultCollateralWithdrawalAnnounced";
  args: {
    agentVault: string;
    amountWei: BN;
    withdrawalAllowedAt: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export type AllEvents =
  | AgentAvailable
  | AgentCollateralTypeChanged
  | AgentDestroyAnnounced
  | AgentDestroyed
  | AgentPing
  | AgentPingResponse
  | AgentSettingChangeAnnounced
  | AgentSettingChanged
  | AgentVaultCreated
  | AvailableAgentExitAnnounced
  | AvailableAgentExited
  | CollateralRatiosChanged
  | CollateralReservationDeleted
  | CollateralReserved
  | CollateralTypeAdded
  | ContractChanged
  | CoreVaultRedemptionRequested
  | CurrentUnderlyingBlockUpdated
  | DiamondCut
  | DuplicatePaymentConfirmed
  | DustChanged
  | EmergencyPauseCanceled
  | EmergencyPauseTriggered
  | FullLiquidationStarted
  | GovernanceCallTimelocked
  | GovernanceInitialised
  | GovernedProductionModeEntered
  | IllegalPaymentConfirmed
  | LiquidationEnded
  | LiquidationPerformed
  | LiquidationStarted
  | MintingExecuted
  | MintingPaymentDefault
  | PoolTokenRedemptionAnnounced
  | RedeemedInCollateral
  | RedemptionDefault
  | RedemptionPaymentBlocked
  | RedemptionPaymentFailed
  | RedemptionPerformed
  | RedemptionPoolFeeMinted
  | RedemptionRejected
  | RedemptionRequestIncomplete
  | RedemptionRequested
  | RedemptionTicketCreated
  | RedemptionTicketDeleted
  | RedemptionTicketUpdated
  | RedemptionTicketsConsolidated
  | ReturnFromCoreVaultCancelled
  | ReturnFromCoreVaultConfirmed
  | ReturnFromCoreVaultRequested
  | SelfClose
  | SelfMint
  | SettingArrayChanged
  | SettingChanged
  | TimelockedGovernanceCallCanceled
  | TimelockedGovernanceCallExecuted
  | TransferToCoreVaultDefaulted
  | TransferToCoreVaultStarted
  | TransferToCoreVaultSuccessful
  | UnderlyingBalanceChanged
  | UnderlyingBalanceTooLow
  | UnderlyingBalanceToppedUp
  | UnderlyingWithdrawalAnnounced
  | UnderlyingWithdrawalCancelled
  | UnderlyingWithdrawalConfirmed
  | VaultCollateralWithdrawalAnnounced;

export interface IIAssetManagerInstance extends Truffle.ContractInstance {
  addAlwaysAllowedMinterForAgent: {
    (
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addCollateralType: {
    (
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _data: {
        collateralClass: number | BN | string;
        token: string;
        decimals: number | BN | string;
        validUntil: number | BN | string;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: number | BN | string;
        safetyMinCollateralRatioBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  agentPing: {
    (
      _agentVault: string,
      _query: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _query: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _query: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _query: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  agentPingResponse: {
    (
      _agentVault: string,
      _query: number | BN | string,
      _response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _query: number | BN | string,
      _response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _query: number | BN | string,
      _response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _query: number | BN | string,
      _response: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  agentRedemptionQueue(
    _agentVault: string,
    _firstRedemptionTicketId: number | BN | string,
    _pageSize: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
    1: BN;
  }>;

  alwaysAllowedMintersForAgent(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  announceAgentPoolTokenRedemption: {
    (
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceAgentSettingUpdate: {
    (
      _agentVault: string,
      _name: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _name: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      _name: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _name: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceDestroyAgent: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceExitAvailableAgentList: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceUnderlyingWithdrawal: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  announceVaultCollateralWithdrawal: {
    (
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assetManagerController(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  assetMintingDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  assetMintingGranularityUBA(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  assetPriceNatWei(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  attachController: {
    (attached: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      attached: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  beforeCollateralWithdrawal: {
    (
      _token: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _valueNATWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelGovernanceCall: {
    (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelReturnFromCoreVault: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelUnderlyingWithdrawal: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collateralReservationFee(
    _lots: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  collateralReservationInfo(
    _collateralReservationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralReservationId: BN;
    agentVault: string;
    minter: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: BN;
    mintingFeeUBA: BN;
    reservationFeeNatWei: BN;
    poolFeeShareBIPS: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    executor: string;
    executorFeeNatWei: BN;
    status: BN;
  }>;

  confirmRedemptionPayment: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmReturnFromCoreVault: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTopupPayment: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmUnderlyingWithdrawal: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  consolidateSmallTickets: {
    (
      _firstTicketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _firstTicketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _firstTicketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _firstTicketId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  controllerAttached(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  convertDustToTicket: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  coreVaultAvailableAmount(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  createAgentVault: {
    (
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _addressProof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _settings: {
        vaultCollateralToken: string;
        poolTokenSuffix: string;
        feeBIPS: number | BN | string;
        poolFeeShareBIPS: number | BN | string;
        mintingVaultCollateralRatioBIPS: number | BN | string;
        mintingPoolCollateralRatioBIPS: number | BN | string;
        buyFAssetByAgentFactorBIPS: number | BN | string;
        poolExitCollateralRatioBIPS: number | BN | string;
        redemptionPoolFeeShareBIPS: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  currentUnderlyingBlock(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  destroyAgent: {
    (
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  diamondCut: {
    (
      _diamondCut: {
        facetAddress: string;
        action: number | BN | string;
        functionSelectors: string[];
      }[],
      _init: string,
      _calldata: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _diamondCut: {
        facetAddress: string;
        action: number | BN | string;
        functionSelectors: string[];
      }[],
      _init: string,
      _calldata: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _diamondCut: {
        facetAddress: string;
        action: number | BN | string;
        functionSelectors: string[];
      }[],
      _init: string,
      _calldata: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _diamondCut: {
        facetAddress: string;
        action: number | BN | string;
        functionSelectors: string[];
      }[],
      _init: string,
      _calldata: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  doublePaymentChallenge: {
    (
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment1: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _payment2: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emergencyPause: {
    (
      _level: number | BN | string,
      _byGovernance: boolean,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _level: number | BN | string,
      _byGovernance: boolean,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _level: number | BN | string,
      _byGovernance: boolean,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _level: number | BN | string,
      _byGovernance: boolean,
      _duration: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emergencyPauseDetails(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

  emergencyPauseLevel(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  emergencyPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  emergencyPausedUntil(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  endLiquidation: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeAgentSettingUpdate: {
    (
      _agentVault: string,
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeGovernanceCall: {
    (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _encodedCall: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeMinting: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exitAvailableAgentList: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

  facetAddress(
    _functionSelector: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  facetAddresses(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  facets(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ facetAddress: string; functionSelectors: string[] }[]>;

  finishRedemptionWithoutPayment: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  freeBalanceNegativeChallenge: {
    (
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payments: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      }[],
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAgentFullPoolCollateral(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAgentFullVaultCollateral(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAgentInfo(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    status: BN;
    ownerManagementAddress: string;
    ownerWorkAddress: string;
    collateralPool: string;
    collateralPoolToken: string;
    underlyingAddressString: string;
    publiclyAvailable: boolean;
    feeBIPS: BN;
    poolFeeShareBIPS: BN;
    vaultCollateralToken: string;
    mintingVaultCollateralRatioBIPS: BN;
    mintingPoolCollateralRatioBIPS: BN;
    freeCollateralLots: BN;
    totalVaultCollateralWei: BN;
    freeVaultCollateralWei: BN;
    vaultCollateralRatioBIPS: BN;
    poolWNatToken: string;
    totalPoolCollateralNATWei: BN;
    freePoolCollateralNATWei: BN;
    poolCollateralRatioBIPS: BN;
    totalAgentPoolTokensWei: BN;
    announcedVaultCollateralWithdrawalWei: BN;
    announcedPoolTokensWithdrawalWei: BN;
    freeAgentPoolTokensWei: BN;
    mintedUBA: BN;
    reservedUBA: BN;
    redeemingUBA: BN;
    poolRedeemingUBA: BN;
    dustUBA: BN;
    liquidationStartTimestamp: BN;
    maxLiquidationAmountUBA: BN;
    liquidationPaymentFactorVaultBIPS: BN;
    liquidationPaymentFactorPoolBIPS: BN;
    underlyingBalanceUBA: BN;
    requiredUnderlyingBalanceUBA: BN;
    freeUnderlyingBalanceUBA: BN;
    announcedUnderlyingWithdrawalId: BN;
    buyFAssetByAgentFactorBIPS: BN;
    poolExitCollateralRatioBIPS: BN;
    redemptionPoolFeeShareBIPS: BN;
  }>;

  getAgentLiquidationFactorsAndMaxAmount(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getAgentMinPoolCollateralRatioBIPS(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAgentMinVaultCollateralRatioBIPS(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAgentSetting(
    _agentVault: string,
    _name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getAgentVaultCollateralToken(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAgentVaultOwner(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAllAgents(
    _start: number | BN | string,
    _end: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN }>;

  getAvailableAgentsDetailedList(
    _start: number | BN | string,
    _end: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: {
      agentVault: string;
      ownerManagementAddress: string;
      feeBIPS: BN;
      mintingVaultCollateralRatioBIPS: BN;
      mintingPoolCollateralRatioBIPS: BN;
      freeCollateralLots: BN;
      status: BN;
    }[];
    1: BN;
  }>;

  getAvailableAgentsList(
    _start: number | BN | string,
    _end: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN }>;

  getCollateralPool(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCollateralPoolTokenTimelockSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCollateralType(
    _collateralClass: number | BN | string,
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralClass: BN;
    token: string;
    decimals: BN;
    validUntil: BN;
    directPricePair: boolean;
    assetFtsoSymbol: string;
    tokenFtsoSymbol: string;
    minCollateralRatioBIPS: BN;
    safetyMinCollateralRatioBIPS: BN;
  }>;

  getCollateralTypes(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      collateralClass: BN;
      token: string;
      decimals: BN;
      validUntil: BN;
      directPricePair: boolean;
      assetFtsoSymbol: string;
      tokenFtsoSymbol: string;
      minCollateralRatioBIPS: BN;
      safetyMinCollateralRatioBIPS: BN;
    }[]
  >;

  getCoreVaultManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getCoreVaultMinimumAmountLeftBIPS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultMinimumRedeemLots(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultNativeAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCoreVaultRedemptionFeeBIPS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCoreVaultTransferTimeExtensionSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getFAssetsBackedByPool(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getSettings(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    assetManagerController: string;
    fAsset: string;
    agentVaultFactory: string;
    collateralPoolFactory: string;
    collateralPoolTokenFactory: string;
    poolTokenSuffix: string;
    __whitelist: string;
    agentOwnerRegistry: string;
    fdcVerification: string;
    burnAddress: string;
    priceReader: string;
    assetDecimals: BN;
    assetMintingDecimals: BN;
    chainId: string;
    averageBlockTimeMS: BN;
    mintingPoolHoldingsRequiredBIPS: BN;
    collateralReservationFeeBIPS: BN;
    assetUnitUBA: BN;
    assetMintingGranularityUBA: BN;
    lotSizeAMG: BN;
    __minUnderlyingBackingBIPS: BN;
    __requireEOAAddressProof: boolean;
    mintingCapAMG: BN;
    underlyingBlocksForPayment: BN;
    underlyingSecondsForPayment: BN;
    redemptionFeeBIPS: BN;
    redemptionDefaultFactorVaultCollateralBIPS: BN;
    __redemptionDefaultFactorPoolBIPS: BN;
    confirmationByOthersAfterSeconds: BN;
    confirmationByOthersRewardUSD5: BN;
    maxRedeemedTickets: BN;
    paymentChallengeRewardBIPS: BN;
    paymentChallengeRewardUSD5: BN;
    withdrawalWaitMinSeconds: BN;
    maxTrustedPriceAgeSeconds: BN;
    __ccbTimeSeconds: BN;
    attestationWindowSeconds: BN;
    minUpdateRepeatTimeSeconds: BN;
    __buybackCollateralFactorBIPS: BN;
    __announcedUnderlyingConfirmationMinSeconds: BN;
    __tokenInvalidationTimeMinSeconds: BN;
    vaultCollateralBuyForFlareFactorBIPS: BN;
    agentExitAvailableTimelockSeconds: BN;
    agentFeeChangeTimelockSeconds: BN;
    agentMintingCRChangeTimelockSeconds: BN;
    poolExitCRChangeTimelockSeconds: BN;
    agentTimelockedOperationWindowSeconds: BN;
    collateralPoolTokenTimelockSeconds: BN;
    liquidationStepSeconds: BN;
    liquidationCollateralFactorBIPS: BN[];
    liquidationFactorVaultCollateralBIPS: BN[];
    diamondCutMinTimelockSeconds: BN;
    maxEmergencyPauseDurationSeconds: BN;
    emergencyPauseDurationResetAfterSeconds: BN;
    __cancelCollateralReservationAfterSeconds: BN;
    __rejectOrCancelCollateralReservationReturnFactorBIPS: BN;
    __rejectRedemptionRequestWindowSeconds: BN;
    __takeOverRedemptionRequestWindowSeconds: BN;
    __rejectedRedemptionDefaultFactorVaultCollateralBIPS: BN;
    __rejectedRedemptionDefaultFactorPoolBIPS: BN;
  }>;

  getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getWorkAddress(
    _managementAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  governanceSettings(txDetails?: Truffle.TransactionDetails): Promise<string>;

  illegalPaymentChallenge: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            sourceAddressIndicator: string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            spentAmount: number | BN | string;
            standardPaymentReference: string;
          };
        };
      },
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAgentVaultOwner(
    _agentVault: string,
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isExecutor(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isLockedVaultToken(
    _agentVault: string,
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isPoolTokenSuffixReserved(
    _suffix: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isVaultCollateralToken(
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  liquidate: {
    (
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;
    sendTransaction(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lotSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  makeAgentAvailable: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  maxRedemptionFromAgent(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  maximumTransferToCoreVault(
    _agentVault: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  mintFromFreeUnderlying: {
    (
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintingPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mintingPaymentDefault: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pauseMinting: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  priceReader(txDetails?: Truffle.TransactionDetails): Promise<string>;

  productionMode(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  redeem: {
    (
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _lots: number | BN | string,
      _redeemerUnderlyingAddressString: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemFromAgent: {
    (
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      _receiverUnderlyingAddress: string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemFromAgentInCollateral: {
    (
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _receiver: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemFromCoreVault: {
    (
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _lots: number | BN | string,
      _redeemerUnderlyingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redemptionPaymentDefault: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redemptionPaymentExtensionSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  redemptionQueue(
    _firstRedemptionTicketId: number | BN | string,
    _pageSize: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
    1: BN;
  }>;

  redemptionRequestInfo(
    _redemptionRequestId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    redemptionRequestId: BN;
    status: BN;
    agentVault: string;
    redeemer: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: BN;
    feeUBA: BN;
    poolFeeShareBIPS: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    timestamp: BN;
    poolSelfClose: boolean;
    transferToCoreVault: boolean;
    executor: string;
    executorFeeNatWei: BN;
  }>;

  rejectInvalidRedemption: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: { addressStr: string };
          responseBody: {
            isValid: boolean;
            standardAddress: string;
            standardAddressHash: string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeAlwaysAllowedMinterForAgent: {
    (
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestReturnFromCoreVault: {
    (
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  reserveCollateral: {
    (
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _lots: number | BN | string,
      _maxMintingFeeBIPS: number | BN | string,
      _executor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resetEmergencyPauseTotalDuration: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  selfClose: {
    (
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  selfMint: {
    (
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _payment: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            transactionId: string;
            inUtxo: number | BN | string;
            utxo: number | BN | string;
          };
          responseBody: {
            blockNumber: number | BN | string;
            blockTimestamp: number | BN | string;
            sourceAddressHash: string;
            sourceAddressesRoot: string;
            receivingAddressHash: string;
            intendedReceivingAddressHash: string;
            spentAmount: number | BN | string;
            intendedSpentAmount: number | BN | string;
            receivedAmount: number | BN | string;
            intendedReceivedAmount: number | BN | string;
            standardPaymentReference: string;
            oneToOne: boolean;
            status: number | BN | string;
          };
        };
      },
      _agentVault: string,
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentExitAvailableTimelockSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentFeeChangeTimelockSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentMintingCRChangeTimelockSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentOwnerRegistry: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentTimelockedOperationWindowSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAgentVaultFactory: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAttestationWindowSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAverageBlockTimeMS: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCleanerContract: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCleanupBlockNumberManager: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralPoolFactory: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralPoolTokenFactory: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralPoolTokenTimelockSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralRatiosForToken: {
    (
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _collateralClass: number | BN | string,
      _token: string,
      _minCollateralRatioBIPS: number | BN | string,
      _safetyMinCollateralRatioBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCollateralReservationFeeBips: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setConfirmationByOthersAfterSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setConfirmationByOthersRewardUSD5: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultManager: {
    (
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _coreVaultManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultMinimumAmountLeftBIPS: {
    (
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _minimumAmountLeftBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultMinimumRedeemLots: {
    (
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _minimumRedeemLots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultNativeAddress: {
    (_nativeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _nativeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nativeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nativeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultRedemptionFeeBIPS: {
    (
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _redemptionFeeBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCoreVaultTransferTimeExtensionSeconds: {
    (
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _transferTimeExtensionSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setEmergencyPauseDurationResetAfterSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFdcVerification: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLiquidationPaymentFactors: {
    (
      _liquidationFactors: (number | BN | string)[],
      _vaultCollateralFactors: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _liquidationFactors: (number | BN | string)[],
      _vaultCollateralFactors: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _liquidationFactors: (number | BN | string)[],
      _vaultCollateralFactors: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _liquidationFactors: (number | BN | string)[],
      _vaultCollateralFactors: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLiquidationStepSeconds: {
    (
      _stepSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _stepSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stepSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stepSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLotSizeAmg: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMaxEmergencyPauseDurationSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMaxRedeemedTickets: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMaxTrustedPriceAgeSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinUpdateRepeatTimeSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMintingCapAmg: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMintingPoolHoldingsRequiredBIPS: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPaymentChallengeReward: {
    (
      _rewardUSD5: number | BN | string,
      _rewardBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardUSD5: number | BN | string,
      _rewardBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardUSD5: number | BN | string,
      _rewardBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardUSD5: number | BN | string,
      _rewardBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPoolExitCRChangeTimelockSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPriceReader: {
    (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_value: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRedemptionDefaultFactorVaultCollateralBIPS: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRedemptionFeeBips: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRedemptionPaymentExtensionSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTimeForPayment: {
    (
      _underlyingBlocks: number | BN | string,
      _underlyingSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _underlyingBlocks: number | BN | string,
      _underlyingSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _underlyingBlocks: number | BN | string,
      _underlyingSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _underlyingBlocks: number | BN | string,
      _underlyingSeconds: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setVaultCollateralBuyForFlareFactorBIPS: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWithdrawalOrDestroyWaitMinSeconds: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startLiquidation: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  switchToProductionMode: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferToCoreVault: {
    (
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _amountUBA: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpauseMinting: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  unstickMinting: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateCollateral: {
    (
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateCurrentBlock: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateSystemContracts: {
    (
      _controller: string,
      _wNat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _controller: string,
      _wNat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _controller: string,
      _wNat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _controller: string,
      _wNat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeAgentVaultAndPool: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeAgentVaultsAndPools: {
    (
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeFAssetImplementation: {
    (
      _value: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _value: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: string,
      callData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgradeWNatContract: {
    (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addAlwaysAllowedMinterForAgent: {
      (
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addCollateralType: {
      (
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _data: {
          collateralClass: number | BN | string;
          token: string;
          decimals: number | BN | string;
          validUntil: number | BN | string;
          directPricePair: boolean;
          assetFtsoSymbol: string;
          tokenFtsoSymbol: string;
          minCollateralRatioBIPS: number | BN | string;
          safetyMinCollateralRatioBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    agentPing: {
      (
        _agentVault: string,
        _query: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _query: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _query: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _query: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    agentPingResponse: {
      (
        _agentVault: string,
        _query: number | BN | string,
        _response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _query: number | BN | string,
        _response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _query: number | BN | string,
        _response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _query: number | BN | string,
        _response: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    agentRedemptionQueue(
      _agentVault: string,
      _firstRedemptionTicketId: number | BN | string,
      _pageSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
      1: BN;
    }>;

    alwaysAllowedMintersForAgent(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    announceAgentPoolTokenRedemption: {
      (
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceAgentSettingUpdate: {
      (
        _agentVault: string,
        _name: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _name: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        _name: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _name: string,
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceDestroyAgent: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceExitAvailableAgentList: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceUnderlyingWithdrawal: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    announceVaultCollateralWithdrawal: {
      (
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    assetManagerController(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assetMintingDecimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    assetMintingGranularityUBA(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    assetPriceNatWei(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    attachController: {
      (attached: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        attached: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    beforeCollateralWithdrawal: {
      (
        _token: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _valueNATWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelGovernanceCall: {
      (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelReturnFromCoreVault: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelUnderlyingWithdrawal: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collateralReservationFee(
      _lots: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    collateralReservationInfo(
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralReservationId: BN;
      agentVault: string;
      minter: string;
      paymentAddress: string;
      paymentReference: string;
      valueUBA: BN;
      mintingFeeUBA: BN;
      reservationFeeNatWei: BN;
      poolFeeShareBIPS: BN;
      firstUnderlyingBlock: BN;
      lastUnderlyingBlock: BN;
      lastUnderlyingTimestamp: BN;
      executor: string;
      executorFeeNatWei: BN;
      status: BN;
    }>;

    confirmRedemptionPayment: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmReturnFromCoreVault: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmTopupPayment: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmUnderlyingWithdrawal: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    consolidateSmallTickets: {
      (
        _firstTicketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _firstTicketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _firstTicketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _firstTicketId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    controllerAttached(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    convertDustToTicket: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    coreVaultAvailableAmount(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    createAgentVault: {
      (
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _addressProof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _settings: {
          vaultCollateralToken: string;
          poolTokenSuffix: string;
          feeBIPS: number | BN | string;
          poolFeeShareBIPS: number | BN | string;
          mintingVaultCollateralRatioBIPS: number | BN | string;
          mintingPoolCollateralRatioBIPS: number | BN | string;
          buyFAssetByAgentFactorBIPS: number | BN | string;
          poolExitCollateralRatioBIPS: number | BN | string;
          redemptionPoolFeeShareBIPS: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    currentUnderlyingBlock(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    destroyAgent: {
      (
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    diamondCut: {
      (
        _diamondCut: {
          facetAddress: string;
          action: number | BN | string;
          functionSelectors: string[];
        }[],
        _init: string,
        _calldata: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _diamondCut: {
          facetAddress: string;
          action: number | BN | string;
          functionSelectors: string[];
        }[],
        _init: string,
        _calldata: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _diamondCut: {
          facetAddress: string;
          action: number | BN | string;
          functionSelectors: string[];
        }[],
        _init: string,
        _calldata: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _diamondCut: {
          facetAddress: string;
          action: number | BN | string;
          functionSelectors: string[];
        }[],
        _init: string,
        _calldata: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    doublePaymentChallenge: {
      (
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment1: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _payment2: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    emergencyPause: {
      (
        _level: number | BN | string,
        _byGovernance: boolean,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _level: number | BN | string,
        _byGovernance: boolean,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _level: number | BN | string,
        _byGovernance: boolean,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _level: number | BN | string,
        _byGovernance: boolean,
        _duration: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    emergencyPauseDetails(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

    emergencyPauseLevel(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    emergencyPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    emergencyPausedUntil(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    endLiquidation: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeAgentSettingUpdate: {
      (
        _agentVault: string,
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeGovernanceCall: {
      (_encodedCall: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _encodedCall: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeMinting: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exitAvailableAgentList: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fAsset(txDetails?: Truffle.TransactionDetails): Promise<string>;

    facetAddress(
      _functionSelector: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    facetAddresses(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    facets(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ facetAddress: string; functionSelectors: string[] }[]>;

    finishRedemptionWithoutPayment: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    freeBalanceNegativeChallenge: {
      (
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payments: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        }[],
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAgentFullPoolCollateral(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAgentFullVaultCollateral(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAgentInfo(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      status: BN;
      ownerManagementAddress: string;
      ownerWorkAddress: string;
      collateralPool: string;
      collateralPoolToken: string;
      underlyingAddressString: string;
      publiclyAvailable: boolean;
      feeBIPS: BN;
      poolFeeShareBIPS: BN;
      vaultCollateralToken: string;
      mintingVaultCollateralRatioBIPS: BN;
      mintingPoolCollateralRatioBIPS: BN;
      freeCollateralLots: BN;
      totalVaultCollateralWei: BN;
      freeVaultCollateralWei: BN;
      vaultCollateralRatioBIPS: BN;
      poolWNatToken: string;
      totalPoolCollateralNATWei: BN;
      freePoolCollateralNATWei: BN;
      poolCollateralRatioBIPS: BN;
      totalAgentPoolTokensWei: BN;
      announcedVaultCollateralWithdrawalWei: BN;
      announcedPoolTokensWithdrawalWei: BN;
      freeAgentPoolTokensWei: BN;
      mintedUBA: BN;
      reservedUBA: BN;
      redeemingUBA: BN;
      poolRedeemingUBA: BN;
      dustUBA: BN;
      liquidationStartTimestamp: BN;
      maxLiquidationAmountUBA: BN;
      liquidationPaymentFactorVaultBIPS: BN;
      liquidationPaymentFactorPoolBIPS: BN;
      underlyingBalanceUBA: BN;
      requiredUnderlyingBalanceUBA: BN;
      freeUnderlyingBalanceUBA: BN;
      announcedUnderlyingWithdrawalId: BN;
      buyFAssetByAgentFactorBIPS: BN;
      poolExitCollateralRatioBIPS: BN;
      redemptionPoolFeeShareBIPS: BN;
    }>;

    getAgentLiquidationFactorsAndMaxAmount(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getAgentMinPoolCollateralRatioBIPS(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAgentMinVaultCollateralRatioBIPS(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAgentSetting(
      _agentVault: string,
      _name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAgentVaultCollateralToken(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAgentVaultOwner(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAllAgents(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN }>;

    getAvailableAgentsDetailedList(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: {
        agentVault: string;
        ownerManagementAddress: string;
        feeBIPS: BN;
        mintingVaultCollateralRatioBIPS: BN;
        mintingPoolCollateralRatioBIPS: BN;
        freeCollateralLots: BN;
        status: BN;
      }[];
      1: BN;
    }>;

    getAvailableAgentsList(
      _start: number | BN | string,
      _end: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN }>;

    getCollateralPool(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCollateralPoolTokenTimelockSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCollateralType(
      _collateralClass: number | BN | string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralClass: BN;
      token: string;
      decimals: BN;
      validUntil: BN;
      directPricePair: boolean;
      assetFtsoSymbol: string;
      tokenFtsoSymbol: string;
      minCollateralRatioBIPS: BN;
      safetyMinCollateralRatioBIPS: BN;
    }>;

    getCollateralTypes(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        collateralClass: BN;
        token: string;
        decimals: BN;
        validUntil: BN;
        directPricePair: boolean;
        assetFtsoSymbol: string;
        tokenFtsoSymbol: string;
        minCollateralRatioBIPS: BN;
        safetyMinCollateralRatioBIPS: BN;
      }[]
    >;

    getCoreVaultManager(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCoreVaultMinimumAmountLeftBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultMinimumRedeemLots(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultNativeAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCoreVaultRedemptionFeeBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCoreVaultTransferTimeExtensionSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getFAssetsBackedByPool(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSettings(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      assetManagerController: string;
      fAsset: string;
      agentVaultFactory: string;
      collateralPoolFactory: string;
      collateralPoolTokenFactory: string;
      poolTokenSuffix: string;
      __whitelist: string;
      agentOwnerRegistry: string;
      fdcVerification: string;
      burnAddress: string;
      priceReader: string;
      assetDecimals: BN;
      assetMintingDecimals: BN;
      chainId: string;
      averageBlockTimeMS: BN;
      mintingPoolHoldingsRequiredBIPS: BN;
      collateralReservationFeeBIPS: BN;
      assetUnitUBA: BN;
      assetMintingGranularityUBA: BN;
      lotSizeAMG: BN;
      __minUnderlyingBackingBIPS: BN;
      __requireEOAAddressProof: boolean;
      mintingCapAMG: BN;
      underlyingBlocksForPayment: BN;
      underlyingSecondsForPayment: BN;
      redemptionFeeBIPS: BN;
      redemptionDefaultFactorVaultCollateralBIPS: BN;
      __redemptionDefaultFactorPoolBIPS: BN;
      confirmationByOthersAfterSeconds: BN;
      confirmationByOthersRewardUSD5: BN;
      maxRedeemedTickets: BN;
      paymentChallengeRewardBIPS: BN;
      paymentChallengeRewardUSD5: BN;
      withdrawalWaitMinSeconds: BN;
      maxTrustedPriceAgeSeconds: BN;
      __ccbTimeSeconds: BN;
      attestationWindowSeconds: BN;
      minUpdateRepeatTimeSeconds: BN;
      __buybackCollateralFactorBIPS: BN;
      __announcedUnderlyingConfirmationMinSeconds: BN;
      __tokenInvalidationTimeMinSeconds: BN;
      vaultCollateralBuyForFlareFactorBIPS: BN;
      agentExitAvailableTimelockSeconds: BN;
      agentFeeChangeTimelockSeconds: BN;
      agentMintingCRChangeTimelockSeconds: BN;
      poolExitCRChangeTimelockSeconds: BN;
      agentTimelockedOperationWindowSeconds: BN;
      collateralPoolTokenTimelockSeconds: BN;
      liquidationStepSeconds: BN;
      liquidationCollateralFactorBIPS: BN[];
      liquidationFactorVaultCollateralBIPS: BN[];
      diamondCutMinTimelockSeconds: BN;
      maxEmergencyPauseDurationSeconds: BN;
      emergencyPauseDurationResetAfterSeconds: BN;
      __cancelCollateralReservationAfterSeconds: BN;
      __rejectOrCancelCollateralReservationReturnFactorBIPS: BN;
      __rejectRedemptionRequestWindowSeconds: BN;
      __takeOverRedemptionRequestWindowSeconds: BN;
      __rejectedRedemptionDefaultFactorVaultCollateralBIPS: BN;
      __rejectedRedemptionDefaultFactorPoolBIPS: BN;
    }>;

    getWNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getWorkAddress(
      _managementAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    governanceSettings(txDetails?: Truffle.TransactionDetails): Promise<string>;

    illegalPaymentChallenge: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              sourceAddressIndicator: string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              spentAmount: number | BN | string;
              standardPaymentReference: string;
            };
          };
        },
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAgentVaultOwner(
      _agentVault: string,
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isExecutor(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isLockedVaultToken(
      _agentVault: string,
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isPoolTokenSuffixReserved(
      _suffix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isVaultCollateralToken(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    liquidate: {
      (
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN }>;
      sendTransaction(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    lotSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    makeAgentAvailable: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    maxRedemptionFromAgent(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    maximumTransferToCoreVault(
      _agentVault: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    mintFromFreeUnderlying: {
      (
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintingPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    mintingPaymentDefault: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    pauseMinting: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    priceReader(txDetails?: Truffle.TransactionDetails): Promise<string>;

    productionMode(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    redeem: {
      (
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _lots: number | BN | string,
        _redeemerUnderlyingAddressString: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemFromAgent: {
      (
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        _receiverUnderlyingAddress: string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemFromAgentInCollateral: {
      (
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _receiver: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemFromCoreVault: {
      (
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _lots: number | BN | string,
        _redeemerUnderlyingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redemptionPaymentDefault: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redemptionPaymentExtensionSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    redemptionQueue(
      _firstRedemptionTicketId: number | BN | string,
      _pageSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
      1: BN;
    }>;

    redemptionRequestInfo(
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      redemptionRequestId: BN;
      status: BN;
      agentVault: string;
      redeemer: string;
      paymentAddress: string;
      paymentReference: string;
      valueUBA: BN;
      feeUBA: BN;
      poolFeeShareBIPS: BN;
      firstUnderlyingBlock: BN;
      lastUnderlyingBlock: BN;
      lastUnderlyingTimestamp: BN;
      timestamp: BN;
      poolSelfClose: boolean;
      transferToCoreVault: boolean;
      executor: string;
      executorFeeNatWei: BN;
    }>;

    rejectInvalidRedemption: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: { addressStr: string };
            responseBody: {
              isValid: boolean;
              standardAddress: string;
              standardAddressHash: string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeAlwaysAllowedMinterForAgent: {
      (
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestReturnFromCoreVault: {
      (
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    reserveCollateral: {
      (
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _lots: number | BN | string,
        _maxMintingFeeBIPS: number | BN | string,
        _executor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resetEmergencyPauseTotalDuration: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    selfClose: {
      (
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    selfMint: {
      (
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _payment: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              transactionId: string;
              inUtxo: number | BN | string;
              utxo: number | BN | string;
            };
            responseBody: {
              blockNumber: number | BN | string;
              blockTimestamp: number | BN | string;
              sourceAddressHash: string;
              sourceAddressesRoot: string;
              receivingAddressHash: string;
              intendedReceivingAddressHash: string;
              spentAmount: number | BN | string;
              intendedSpentAmount: number | BN | string;
              receivedAmount: number | BN | string;
              intendedReceivedAmount: number | BN | string;
              standardPaymentReference: string;
              oneToOne: boolean;
              status: number | BN | string;
            };
          };
        },
        _agentVault: string,
        _lots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentExitAvailableTimelockSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentFeeChangeTimelockSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentMintingCRChangeTimelockSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentOwnerRegistry: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentTimelockedOperationWindowSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAgentVaultFactory: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAttestationWindowSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAverageBlockTimeMS: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCleanerContract: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCleanupBlockNumberManager: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralPoolFactory: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralPoolTokenFactory: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralPoolTokenTimelockSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralRatiosForToken: {
      (
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _collateralClass: number | BN | string,
        _token: string,
        _minCollateralRatioBIPS: number | BN | string,
        _safetyMinCollateralRatioBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCollateralReservationFeeBips: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setConfirmationByOthersAfterSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setConfirmationByOthersRewardUSD5: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultManager: {
      (
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _coreVaultManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultMinimumAmountLeftBIPS: {
      (
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _minimumAmountLeftBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultMinimumRedeemLots: {
      (
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _minimumRedeemLots: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultNativeAddress: {
      (_nativeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _nativeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nativeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nativeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultRedemptionFeeBIPS: {
      (
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _redemptionFeeBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCoreVaultTransferTimeExtensionSeconds: {
      (
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _transferTimeExtensionSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setEmergencyPauseDurationResetAfterSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFdcVerification: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLiquidationPaymentFactors: {
      (
        _liquidationFactors: (number | BN | string)[],
        _vaultCollateralFactors: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _liquidationFactors: (number | BN | string)[],
        _vaultCollateralFactors: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _liquidationFactors: (number | BN | string)[],
        _vaultCollateralFactors: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _liquidationFactors: (number | BN | string)[],
        _vaultCollateralFactors: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLiquidationStepSeconds: {
      (
        _stepSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _stepSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stepSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stepSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLotSizeAmg: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMaxEmergencyPauseDurationSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMaxRedeemedTickets: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMaxTrustedPriceAgeSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMinUpdateRepeatTimeSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMintingCapAmg: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMintingPoolHoldingsRequiredBIPS: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPaymentChallengeReward: {
      (
        _rewardUSD5: number | BN | string,
        _rewardBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardUSD5: number | BN | string,
        _rewardBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardUSD5: number | BN | string,
        _rewardBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardUSD5: number | BN | string,
        _rewardBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPoolExitCRChangeTimelockSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPriceReader: {
      (_value: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRedemptionDefaultFactorVaultCollateralBIPS: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRedemptionFeeBips: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRedemptionPaymentExtensionSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTimeForPayment: {
      (
        _underlyingBlocks: number | BN | string,
        _underlyingSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _underlyingBlocks: number | BN | string,
        _underlyingSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _underlyingBlocks: number | BN | string,
        _underlyingSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _underlyingBlocks: number | BN | string,
        _underlyingSeconds: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setVaultCollateralBuyForFlareFactorBIPS: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setWithdrawalOrDestroyWaitMinSeconds: {
      (
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    startLiquidation: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    switchToProductionMode: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    transferToCoreVault: {
      (
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _amountUBA: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unpauseMinting: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    unstickMinting: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _collateralReservationId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateCollateral: {
      (
        _agentVault: string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _token: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateCurrentBlock: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateSystemContracts: {
      (
        _controller: string,
        _wNat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _controller: string,
        _wNat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _controller: string,
        _wNat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _controller: string,
        _wNat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeAgentVaultAndPool: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeAgentVaultsAndPools: {
      (
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _start: number | BN | string,
        _end: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeFAssetImplementation: {
      (
        _value: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _value: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _value: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _value: string,
        callData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    upgradeWNatContract: {
      (_agentVault: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
