/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPChainVotePowerContract
  extends Truffle.Contract<IPChainVotePowerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPChainVotePowerInstance>;
}

export interface VotePowerCacheCreated {
  name: "VotePowerCacheCreated";
  args: {
    nodeId: string;
    blockNumber: BN;
    0: string;
    1: BN;
  };
}

export interface VotePowerChanged {
  name: "VotePowerChanged";
  args: {
    owner: string;
    nodeId: string;
    priorVotePower: BN;
    newVotePower: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export type AllEvents = VotePowerCacheCreated | VotePowerChanged;

export interface IPChainVotePowerInstance extends Truffle.ContractInstance {
  batchVotePowerOfAt(
    _nodeIds: string[],
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  stakesOf(
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[] }>;

  stakesOfAt(
    _owner: string,
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: BN[] }>;

  totalVotePower(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalVotePowerAt(
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalVotePowerAtCached: {
    (
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  votePowerFromTo(
    _owner: string,
    _nodeId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votePowerFromToAt(
    _owner: string,
    _nodeId: string,
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votePowerOf(
    _nodeId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votePowerOfAt(
    _nodeId: string,
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votePowerOfAtCached: {
    (
      _owner: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _owner: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _owner: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    batchVotePowerOfAt(
      _nodeIds: string[],
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    stakesOf(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[] }>;

    stakesOfAt(
      _owner: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[] }>;

    totalVotePower(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalVotePowerAt(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalVotePowerAtCached: {
      (
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    votePowerFromTo(
      _owner: string,
      _nodeId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    votePowerFromToAt(
      _owner: string,
      _nodeId: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    votePowerOf(
      _nodeId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    votePowerOfAt(
      _nodeId: string,
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    votePowerOfAtCached: {
      (
        _owner: string,
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _owner: string,
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _owner: string,
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        _blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
