/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RedemptionDefaultsFacetContract
  extends Truffle.Contract<RedemptionDefaultsFacetInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RedemptionDefaultsFacetInstance>;
}

export interface DustChanged {
  name: "DustChanged";
  args: {
    agentVault: string;
    dustUBA: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionDefault {
  name: "RedemptionDefault";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    redemptionAmountUBA: BN;
    redeemedVaultCollateralWei: BN;
    redeemedPoolCollateralWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface RedemptionTicketCreated {
  name: "RedemptionTicketCreated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionTicketUpdated {
  name: "RedemptionTicketUpdated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface TransferToCoreVaultDefaulted {
  name: "TransferToCoreVaultDefaulted";
  args: {
    agentVault: string;
    transferRedemptionRequestId: BN;
    remintedUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents =
  | DustChanged
  | RedemptionDefault
  | RedemptionTicketCreated
  | RedemptionTicketUpdated
  | TransferToCoreVaultDefaulted;

export interface RedemptionDefaultsFacetInstance
  extends Truffle.ContractInstance {
  finishRedemptionWithoutPayment: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            blockNumber: number | BN | string;
            queryWindow: number | BN | string;
          };
          responseBody: {
            blockTimestamp: number | BN | string;
            numberOfConfirmations: number | BN | string;
            lowestQueryWindowBlockNumber: number | BN | string;
            lowestQueryWindowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redemptionPaymentDefault: {
    (
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            minimalBlockNumber: number | BN | string;
            deadlineBlockNumber: number | BN | string;
            deadlineTimestamp: number | BN | string;
            destinationAddressHash: string;
            amount: number | BN | string;
            standardPaymentReference: string;
            checkSourceAddresses: boolean;
            sourceAddressesRoot: string;
          };
          responseBody: {
            minimalBlockTimestamp: number | BN | string;
            firstOverflowBlockNumber: number | BN | string;
            firstOverflowBlockTimestamp: number | BN | string;
          };
        };
      },
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    finishRedemptionWithoutPayment: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              blockNumber: number | BN | string;
              queryWindow: number | BN | string;
            };
            responseBody: {
              blockTimestamp: number | BN | string;
              numberOfConfirmations: number | BN | string;
              lowestQueryWindowBlockNumber: number | BN | string;
              lowestQueryWindowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redemptionPaymentDefault: {
      (
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              minimalBlockNumber: number | BN | string;
              deadlineBlockNumber: number | BN | string;
              deadlineTimestamp: number | BN | string;
              destinationAddressHash: string;
              amount: number | BN | string;
              standardPaymentReference: string;
              checkSourceAddresses: boolean;
              sourceAddressesRoot: string;
            };
            responseBody: {
              minimalBlockTimestamp: number | BN | string;
              firstOverflowBlockNumber: number | BN | string;
              firstOverflowBlockTimestamp: number | BN | string;
            };
          };
        },
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
