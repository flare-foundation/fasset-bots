/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SystemInfoFacetContract
  extends Truffle.Contract<SystemInfoFacetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SystemInfoFacetInstance>;
}

export type AllEvents = never;

export interface SystemInfoFacetInstance extends Truffle.ContractInstance {
  agentRedemptionQueue(
    _agentVault: string,
    _firstRedemptionTicketId: number | BN | string,
    _pageSize: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
    1: BN;
  }>;

  collateralReservationInfo(
    _collateralReservationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    collateralReservationId: BN;
    agentVault: string;
    minter: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: BN;
    mintingFeeUBA: BN;
    reservationFeeNatWei: BN;
    poolFeeShareBIPS: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    executor: string;
    executorFeeNatWei: BN;
    handshakeStartTimestamp: BN;
    sourceAddressesRoot: string;
  }>;

  controllerAttached(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  mintingPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  redemptionQueue(
    _firstRedemptionTicketId: number | BN | string,
    _pageSize: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
    1: BN;
  }>;

  redemptionRequestInfo(
    _redemptionRequestId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    redemptionRequestId: BN;
    status: BN;
    agentVault: string;
    redeemer: string;
    paymentAddress: string;
    paymentReference: string;
    valueUBA: BN;
    feeUBA: BN;
    poolFeeShareBIPS: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    timestamp: BN;
    poolSelfClose: boolean;
    transferToCoreVault: boolean;
    executor: string;
    executorFeeNatWei: BN;
    rejectionTimestamp: BN;
    takeOverTimestamp: BN;
  }>;

  terminated(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  methods: {
    agentRedemptionQueue(
      _agentVault: string,
      _firstRedemptionTicketId: number | BN | string,
      _pageSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
      1: BN;
    }>;

    collateralReservationInfo(
      _collateralReservationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      collateralReservationId: BN;
      agentVault: string;
      minter: string;
      paymentAddress: string;
      paymentReference: string;
      valueUBA: BN;
      mintingFeeUBA: BN;
      reservationFeeNatWei: BN;
      poolFeeShareBIPS: BN;
      firstUnderlyingBlock: BN;
      lastUnderlyingBlock: BN;
      lastUnderlyingTimestamp: BN;
      executor: string;
      executorFeeNatWei: BN;
      handshakeStartTimestamp: BN;
      sourceAddressesRoot: string;
    }>;

    controllerAttached(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    mintingPaused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    redemptionQueue(
      _firstRedemptionTicketId: number | BN | string,
      _pageSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: { redemptionTicketId: BN; agentVault: string; ticketValueUBA: BN }[];
      1: BN;
    }>;

    redemptionRequestInfo(
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      redemptionRequestId: BN;
      status: BN;
      agentVault: string;
      redeemer: string;
      paymentAddress: string;
      paymentReference: string;
      valueUBA: BN;
      feeUBA: BN;
      poolFeeShareBIPS: BN;
      firstUnderlyingBlock: BN;
      lastUnderlyingBlock: BN;
      lastUnderlyingTimestamp: BN;
      timestamp: BN;
      poolSelfClose: boolean;
      transferToCoreVault: boolean;
      executor: string;
      executorFeeNatWei: BN;
      rejectionTimestamp: BN;
      takeOverTimestamp: BN;
    }>;

    terminated(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
