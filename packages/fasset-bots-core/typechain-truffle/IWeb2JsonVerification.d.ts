/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IWeb2JsonVerificationContract
  extends Truffle.Contract<IWeb2JsonVerificationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IWeb2JsonVerificationInstance>;
}

type AllEvents = never;

export interface IWeb2JsonVerificationInstance
  extends Truffle.ContractInstance {
  verifyJsonApi(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          url: string;
          httpMethod: string;
          headers: string;
          queryParams: string;
          body: string;
          postProcessJq: string;
          abiSignature: string;
        };
        responseBody: { abiEncodedData: string };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    verifyJsonApi(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            httpMethod: string;
            headers: string;
            queryParams: string;
            body: string;
            postProcessJq: string;
            abiSignature: string;
          };
          responseBody: { abiEncodedData: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
