/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Truffle } from "./types";

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RedemptionHandshakeFacetContract
  extends Truffle.Contract<RedemptionHandshakeFacetInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RedemptionHandshakeFacetInstance>;
}

export interface DustChanged {
  name: "DustChanged";
  args: {
    agentVault: string;
    dustUBA: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionDefault {
  name: "RedemptionDefault";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    redemptionAmountUBA: BN;
    redeemedVaultCollateralWei: BN;
    redeemedPoolCollateralWei: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface RedemptionRequestRejected {
  name: "RedemptionRequestRejected";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    paymentAddress: string;
    valueUBA: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
  };
}

export interface RedemptionRequestTakenOver {
  name: "RedemptionRequestTakenOver";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    valueTakenOverUBA: BN;
    newAgentVault: string;
    newRequestId: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
    4: string;
    5: BN;
  };
}

export interface RedemptionRequested {
  name: "RedemptionRequested";
  args: {
    agentVault: string;
    redeemer: string;
    requestId: BN;
    paymentAddress: string;
    valueUBA: BN;
    feeUBA: BN;
    firstUnderlyingBlock: BN;
    lastUnderlyingBlock: BN;
    lastUnderlyingTimestamp: BN;
    paymentReference: string;
    executor: string;
    executorFeeNatWei: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: string;
    10: string;
    11: BN;
  };
}

export interface RedemptionTicketCreated {
  name: "RedemptionTicketCreated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RedemptionTicketDeleted {
  name: "RedemptionTicketDeleted";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    0: string;
    1: BN;
  };
}

export interface RedemptionTicketUpdated {
  name: "RedemptionTicketUpdated";
  args: {
    agentVault: string;
    redemptionTicketId: BN;
    ticketValueUBA: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export type AllEvents =
  | DustChanged
  | RedemptionDefault
  | RedemptionRequestRejected
  | RedemptionRequestTakenOver
  | RedemptionRequested
  | RedemptionTicketCreated
  | RedemptionTicketDeleted
  | RedemptionTicketUpdated;

export interface RedemptionHandshakeFacetInstance
  extends Truffle.ContractInstance {
  rejectRedemptionRequest: {
    (
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  takeOverRedemptionRequest: {
    (
      _agentVault: string,
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _agentVault: string,
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _agentVault: string,
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _agentVault: string,
      _redemptionRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    rejectRedemptionRequest: {
      (
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    takeOverRedemptionRequest: {
      (
        _agentVault: string,
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _agentVault: string,
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _agentVault: string,
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _agentVault: string,
        _redemptionRequestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
